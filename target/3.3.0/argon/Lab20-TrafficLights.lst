
/Users/cademissner/Desktop/IoT/Lab20-TrafficLights/target/3.3.0/argon/Lab20-TrafficLights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002544  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6560  000b6560  00006560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b6584  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e60c  000b6588  0001e60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000178  2003e678  2003e678  0002e678  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b65f4  000b65f4  000265f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b661c  000b661c  0002661c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f0e61  00000000  00000000  00026620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000f6f2  00000000  00000000  00117481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00036352  00000000  00000000  00126b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002888  00000000  00000000  0015cec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009b00  00000000  00000000  0015f74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032d3e  00000000  00000000  0016924d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00034ce3  00000000  00000000  0019bf8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012e539  00000000  00000000  001d0c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000073c4  00000000  00000000  002ff1a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 ffcd 	bl	b5fcc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 ffd5 	bl	b5fe8 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e60c 	.word	0x2003e60c
   b4048:	000b6588 	.word	0x000b6588
   b404c:	2003e678 	.word	0x2003e678
   b4050:	2003e678 	.word	0x2003e678
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fe29 	bl	b5cb4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b6538 	.word	0x000b6538
   b407c:	000b655c 	.word	0x000b655c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b89c 	b.w	b41bc <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f89b 	bl	b41c0 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bdc9 	b.w	b5c24 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bef3 	b.w	b4e7c <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bef1 	b.w	b4e7c <malloc>

000b409a <_ZdaPv>:
   b409a:	f000 bef7 	b.w	b4e8c <free>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bef5 	b.w	b4e8c <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_Z8callbackPcPhj>:

enum State {NORTH, EAST};
State currentState = NORTH;
State prevState = NORTH;

void callback(char* topic, byte* payload, unsigned int length) {
   b40b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  char p[length + 1];
   b40b6:	f102 0308 	add.w	r3, r2, #8
void callback(char* topic, byte* payload, unsigned int length) {
   b40ba:	b085      	sub	sp, #20
  char p[length + 1];
   b40bc:	f023 0307 	bic.w	r3, r3, #7
void callback(char* topic, byte* payload, unsigned int length) {
   b40c0:	af00      	add	r7, sp, #0
  char p[length + 1];
   b40c2:	ebad 0d03 	sub.w	sp, sp, r3
void callback(char* topic, byte* payload, unsigned int length) {
   b40c6:	4614      	mov	r4, r2
   b40c8:	4605      	mov	r5, r0
  memcpy(p, payload, length);
   b40ca:	4668      	mov	r0, sp
   b40cc:	f001 ff7e 	bl	b5fcc <memcpy>
  p[length] = NULL;
   b40d0:	2300      	movs	r3, #0

  if (String(p).equals("true")) {
   b40d2:	4669      	mov	r1, sp
   b40d4:	4638      	mov	r0, r7
  p[length] = NULL;
   b40d6:	f80d 3004 	strb.w	r3, [sp, r4]
  if (String(p).equals("true")) {
   b40da:	f001 f92c 	bl	b5336 <_ZN6StringC1EPK19__FlashStringHelper>
   b40de:	4917      	ldr	r1, [pc, #92]	; (b413c <_Z8callbackPcPhj+0x88>)
   b40e0:	4638      	mov	r0, r7
   b40e2:	f001 f94e 	bl	b5382 <_ZNK6String6equalsEPKc>
   b40e6:	4604      	mov	r4, r0
   b40e8:	4638      	mov	r0, r7
   b40ea:	f001 f8d9 	bl	b52a0 <_ZN6StringD1Ev>
   b40ee:	b194      	cbz	r4, b4116 <_Z8callbackPcPhj+0x62>
    prevState = currentState;
   b40f0:	4e13      	ldr	r6, [pc, #76]	; (b4140 <_Z8callbackPcPhj+0x8c>)
   b40f2:	4b14      	ldr	r3, [pc, #80]	; (b4144 <_Z8callbackPcPhj+0x90>)
   b40f4:	7832      	ldrb	r2, [r6, #0]
   b40f6:	701a      	strb	r2, [r3, #0]
    if (String(topic).equals("cade/eastsensor")) {
   b40f8:	4629      	mov	r1, r5
   b40fa:	4638      	mov	r0, r7
   b40fc:	f001 f91b 	bl	b5336 <_ZN6StringC1EPK19__FlashStringHelper>
   b4100:	4911      	ldr	r1, [pc, #68]	; (b4148 <_Z8callbackPcPhj+0x94>)
   b4102:	4638      	mov	r0, r7
   b4104:	f001 f93d 	bl	b5382 <_ZNK6String6equalsEPKc>
   b4108:	4604      	mov	r4, r0
   b410a:	4638      	mov	r0, r7
   b410c:	f001 f8c8 	bl	b52a0 <_ZN6StringD1Ev>
   b4110:	b124      	cbz	r4, b411c <_Z8callbackPcPhj+0x68>
      currentState = EAST;
   b4112:	2301      	movs	r3, #1
   b4114:	7033      	strb	r3, [r6, #0]
    } else if (String(topic).equals("cade/northsensor")) {
      currentState = NORTH;
    }
  }
}
   b4116:	3714      	adds	r7, #20
   b4118:	46bd      	mov	sp, r7
   b411a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (String(topic).equals("cade/northsensor")) {
   b411c:	4629      	mov	r1, r5
   b411e:	4638      	mov	r0, r7
   b4120:	f001 f909 	bl	b5336 <_ZN6StringC1EPK19__FlashStringHelper>
   b4124:	4909      	ldr	r1, [pc, #36]	; (b414c <_Z8callbackPcPhj+0x98>)
   b4126:	4638      	mov	r0, r7
   b4128:	f001 f92b 	bl	b5382 <_ZNK6String6equalsEPKc>
   b412c:	4605      	mov	r5, r0
   b412e:	4638      	mov	r0, r7
   b4130:	f001 f8b6 	bl	b52a0 <_ZN6StringD1Ev>
   b4134:	2d00      	cmp	r5, #0
   b4136:	d0ee      	beq.n	b4116 <_Z8callbackPcPhj+0x62>
      currentState = NORTH;
   b4138:	7034      	strb	r4, [r6, #0]
}
   b413a:	e7ec      	b.n	b4116 <_Z8callbackPcPhj+0x62>
   b413c:	000b6158 	.word	0x000b6158
   b4140:	2003e6d8 	.word	0x2003e6d8
   b4144:	2003e6d9 	.word	0x2003e6d9
   b4148:	000b615d 	.word	0x000b615d
   b414c:	000b616d 	.word	0x000b616d

000b4150 <_Z7setLEDsPcS_S_S_S_S_>:

void setLEDs(char* redN, char* yellowN, char* greenN, char* redE, char* yellowE, char* greenE) {
   b4150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  client.publish("cade/northred", redN);
   b4154:	4c12      	ldr	r4, [pc, #72]	; (b41a0 <_Z7setLEDsPcS_S_S_S_S_+0x50>)
void setLEDs(char* redN, char* yellowN, char* greenN, char* redE, char* yellowE, char* greenE) {
   b4156:	460f      	mov	r7, r1
   b4158:	4616      	mov	r6, r2
  client.publish("cade/northred", redN);
   b415a:	4912      	ldr	r1, [pc, #72]	; (b41a4 <_Z7setLEDsPcS_S_S_S_S_+0x54>)
   b415c:	4602      	mov	r2, r0
   b415e:	4620      	mov	r0, r4
void setLEDs(char* redN, char* yellowN, char* greenN, char* redE, char* yellowE, char* greenE) {
   b4160:	461d      	mov	r5, r3
   b4162:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
  client.publish("cade/northred", redN);
   b4166:	f000 fb46 	bl	b47f6 <_ZN4MQTT7publishEPKcS1_>
  client.publish("cade/northyellow", yellowN);
   b416a:	463a      	mov	r2, r7
   b416c:	490e      	ldr	r1, [pc, #56]	; (b41a8 <_Z7setLEDsPcS_S_S_S_S_+0x58>)
   b416e:	4620      	mov	r0, r4
   b4170:	f000 fb41 	bl	b47f6 <_ZN4MQTT7publishEPKcS1_>
  client.publish("cade/northgreen", greenN);
   b4174:	4632      	mov	r2, r6
   b4176:	490d      	ldr	r1, [pc, #52]	; (b41ac <_Z7setLEDsPcS_S_S_S_S_+0x5c>)
   b4178:	4620      	mov	r0, r4
   b417a:	f000 fb3c 	bl	b47f6 <_ZN4MQTT7publishEPKcS1_>
  client.publish("cade/eastred", redE);
   b417e:	462a      	mov	r2, r5
   b4180:	490b      	ldr	r1, [pc, #44]	; (b41b0 <_Z7setLEDsPcS_S_S_S_S_+0x60>)
   b4182:	4620      	mov	r0, r4
   b4184:	f000 fb37 	bl	b47f6 <_ZN4MQTT7publishEPKcS1_>
  client.publish("cade/eastyellow", yellowE);
   b4188:	464a      	mov	r2, r9
   b418a:	490a      	ldr	r1, [pc, #40]	; (b41b4 <_Z7setLEDsPcS_S_S_S_S_+0x64>)
   b418c:	4620      	mov	r0, r4
   b418e:	f000 fb32 	bl	b47f6 <_ZN4MQTT7publishEPKcS1_>
  client.publish("cade/eastgreen", greenE);
   b4192:	4642      	mov	r2, r8
   b4194:	4620      	mov	r0, r4
   b4196:	4908      	ldr	r1, [pc, #32]	; (b41b8 <_Z7setLEDsPcS_S_S_S_S_+0x68>)
}
   b4198:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  client.publish("cade/eastgreen", greenE);
   b419c:	f000 bb2b 	b.w	b47f6 <_ZN4MQTT7publishEPKcS1_>
   b41a0:	2003e678 	.word	0x2003e678
   b41a4:	000b617e 	.word	0x000b617e
   b41a8:	000b618c 	.word	0x000b618c
   b41ac:	000b619d 	.word	0x000b619d
   b41b0:	000b61ad 	.word	0x000b61ad
   b41b4:	000b61ba 	.word	0x000b61ba
   b41b8:	000b61ca 	.word	0x000b61ca

000b41bc <setup>:

void setup() {
}
   b41bc:	4770      	bx	lr
	...

000b41c0 <loop>:

void loop() {
   b41c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (client.isConnected()) {
   b41c2:	482c      	ldr	r0, [pc, #176]	; (b4274 <loop+0xb4>)
void loop() {
   b41c4:	b087      	sub	sp, #28
  if (client.isConnected()) {
   b41c6:	f000 f99b 	bl	b4500 <_ZN4MQTT11isConnectedEv>
   b41ca:	b148      	cbz	r0, b41e0 <loop+0x20>
    client.loop();
   b41cc:	4829      	ldr	r0, [pc, #164]	; (b4274 <loop+0xb4>)
   b41ce:	f000 fb6e 	bl	b48ae <_ZN4MQTT4loopEv>
    client.connect(System.deviceID());
    client.subscribe("cade/eastsensor");
    client.subscribe("cade/northsensor");
  }

  switch (currentState) {
   b41d2:	4b29      	ldr	r3, [pc, #164]	; (b4278 <loop+0xb8>)
   b41d4:	781d      	ldrb	r5, [r3, #0]
   b41d6:	b1b5      	cbz	r5, b4206 <loop+0x46>
   b41d8:	2d01      	cmp	r5, #1
   b41da:	d02f      	beq.n	b423c <loop+0x7c>
      setLEDs("true", "false", "false", "false", "false", "true");
      prevState = EAST;
    }
    break;
  }
   b41dc:	b007      	add	sp, #28
   b41de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b41e0:	a802      	add	r0, sp, #8
   b41e2:	f000 fddb 	bl	b4d9c <spark_deviceID>
    client.connect(System.deviceID());
   b41e6:	9902      	ldr	r1, [sp, #8]
   b41e8:	4822      	ldr	r0, [pc, #136]	; (b4274 <loop+0xb4>)
   b41ea:	f000 fa79 	bl	b46e0 <_ZN4MQTT7connectEPKc>
   b41ee:	a802      	add	r0, sp, #8
   b41f0:	f001 f856 	bl	b52a0 <_ZN6StringD1Ev>
    client.subscribe("cade/eastsensor");
   b41f4:	4921      	ldr	r1, [pc, #132]	; (b427c <loop+0xbc>)
   b41f6:	481f      	ldr	r0, [pc, #124]	; (b4274 <loop+0xb4>)
   b41f8:	f000 fca1 	bl	b4b3e <_ZN4MQTT9subscribeEPKc>
    client.subscribe("cade/northsensor");
   b41fc:	4920      	ldr	r1, [pc, #128]	; (b4280 <loop+0xc0>)
   b41fe:	481d      	ldr	r0, [pc, #116]	; (b4274 <loop+0xb4>)
   b4200:	f000 fc9d 	bl	b4b3e <_ZN4MQTT9subscribeEPKc>
   b4204:	e7e5      	b.n	b41d2 <loop+0x12>
    if (prevState != NORTH) {
   b4206:	4e1f      	ldr	r6, [pc, #124]	; (b4284 <loop+0xc4>)
   b4208:	7833      	ldrb	r3, [r6, #0]
   b420a:	2b00      	cmp	r3, #0
   b420c:	d0e6      	beq.n	b41dc <loop+0x1c>
      setLEDs("true", "false", "false", "false", "true", "false");
   b420e:	491e      	ldr	r1, [pc, #120]	; (b4288 <loop+0xc8>)
   b4210:	4c1e      	ldr	r4, [pc, #120]	; (b428c <loop+0xcc>)
   b4212:	460b      	mov	r3, r1
   b4214:	460a      	mov	r2, r1
   b4216:	e9cd 4100 	strd	r4, r1, [sp]
   b421a:	4620      	mov	r0, r4
   b421c:	f7ff ff98 	bl	b4150 <_Z7setLEDsPcS_S_S_S_S_>
      delay(5000);
   b4220:	f241 3088 	movw	r0, #5000	; 0x1388
   b4224:	f000 fe5a 	bl	b4edc <delay>
      setLEDs("false", "false", "true", "true", "false", "false");
   b4228:	4917      	ldr	r1, [pc, #92]	; (b4288 <loop+0xc8>)
   b422a:	4623      	mov	r3, r4
   b422c:	e9cd 1100 	strd	r1, r1, [sp]
   b4230:	4622      	mov	r2, r4
   b4232:	4608      	mov	r0, r1
   b4234:	f7ff ff8c 	bl	b4150 <_Z7setLEDsPcS_S_S_S_S_>
      prevState = NORTH;
   b4238:	7035      	strb	r5, [r6, #0]
   b423a:	e7cf      	b.n	b41dc <loop+0x1c>
    if (prevState != EAST) {
   b423c:	4f11      	ldr	r7, [pc, #68]	; (b4284 <loop+0xc4>)
   b423e:	783b      	ldrb	r3, [r7, #0]
   b4240:	2b01      	cmp	r3, #1
   b4242:	d0cb      	beq.n	b41dc <loop+0x1c>
      setLEDs("false", "true", "false", "true", "false", "false");
   b4244:	4c10      	ldr	r4, [pc, #64]	; (b4288 <loop+0xc8>)
   b4246:	4e11      	ldr	r6, [pc, #68]	; (b428c <loop+0xcc>)
   b4248:	4622      	mov	r2, r4
   b424a:	4633      	mov	r3, r6
   b424c:	4631      	mov	r1, r6
   b424e:	4620      	mov	r0, r4
   b4250:	e9cd 4400 	strd	r4, r4, [sp]
   b4254:	f7ff ff7c 	bl	b4150 <_Z7setLEDsPcS_S_S_S_S_>
      delay(5000);
   b4258:	f241 3088 	movw	r0, #5000	; 0x1388
   b425c:	f000 fe3e 	bl	b4edc <delay>
      setLEDs("true", "false", "false", "false", "false", "true");
   b4260:	e9cd 4600 	strd	r4, r6, [sp]
   b4264:	4623      	mov	r3, r4
   b4266:	4622      	mov	r2, r4
   b4268:	4621      	mov	r1, r4
   b426a:	4630      	mov	r0, r6
   b426c:	f7ff ff70 	bl	b4150 <_Z7setLEDsPcS_S_S_S_S_>
      prevState = EAST;
   b4270:	703d      	strb	r5, [r7, #0]
   b4272:	e7b3      	b.n	b41dc <loop+0x1c>
   b4274:	2003e678 	.word	0x2003e678
   b4278:	2003e6d8 	.word	0x2003e6d8
   b427c:	000b615d 	.word	0x000b615d
   b4280:	000b616d 	.word	0x000b616d
   b4284:	2003e6d9 	.word	0x2003e6d9
   b4288:	000b61d9 	.word	0x000b61d9
   b428c:	000b6158 	.word	0x000b6158

000b4290 <_GLOBAL__sub_I_client>:
   b4290:	b507      	push	{r0, r1, r2, lr}
SYSTEM_THREAD(ENABLED);
   b4292:	2100      	movs	r1, #0
   b4294:	2001      	movs	r0, #1
   b4296:	f000 fd65 	bl	b4d64 <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   b429a:	2300      	movs	r3, #0
   b429c:	9300      	str	r3, [sp, #0]
   b429e:	4905      	ldr	r1, [pc, #20]	; (b42b4 <_GLOBAL__sub_I_client+0x24>)
   b42a0:	4b05      	ldr	r3, [pc, #20]	; (b42b8 <_GLOBAL__sub_I_client+0x28>)
   b42a2:	4806      	ldr	r0, [pc, #24]	; (b42bc <_GLOBAL__sub_I_client+0x2c>)
   b42a4:	f240 725b 	movw	r2, #1883	; 0x75b
   b42a8:	f000 f84e 	bl	b4348 <_ZN4MQTTC1EPKctPFvPcPhjEb>
   b42ac:	b003      	add	sp, #12
   b42ae:	f85d fb04 	ldr.w	pc, [sp], #4
   b42b2:	bf00      	nop
   b42b4:	000b61df 	.word	0x000b61df
   b42b8:	000b40b5 	.word	0x000b40b5
   b42bc:	2003e678 	.word	0x2003e678

000b42c0 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b42c0:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b42c4:	b510      	push	{r4, lr}
   b42c6:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b42c8:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b42ca:	b113      	cbz	r3, b42d2 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b42cc:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b42ce:	f000 fc41 	bl	b4b54 <os_mutex_lock>
#endif
#endif
#endif
        }
   b42d2:	4620      	mov	r0, r4
   b42d4:	bd10      	pop	{r4, pc}

000b42d6 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b42d6:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b42d8:	6803      	ldr	r3, [r0, #0]
   b42da:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b42de:	4604      	mov	r4, r0
            if (mqtt->thread)
   b42e0:	b112      	cbz	r2, b42e8 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b42e2:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b42e4:	f000 fc3e 	bl	b4b64 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b42e8:	4620      	mov	r0, r4
   b42ea:	bd10      	pop	{r4, pc}

000b42ec <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b42ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b42ee:	461f      	mov	r7, r3
   b42f0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b42f4:	4604      	mov	r4, r0
   b42f6:	460d      	mov	r5, r1
   b42f8:	4616      	mov	r6, r2
    if (thread) {
   b42fa:	b12b      	cbz	r3, b4308 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b42fc:	2301      	movs	r3, #1
   b42fe:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b4302:	3058      	adds	r0, #88	; 0x58
   b4304:	f000 fc1e 	bl	b4b44 <os_mutex_create>
    }
    this->callback = callback;
   b4308:	9b08      	ldr	r3, [sp, #32]
   b430a:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b430c:	2300      	movs	r3, #0
   b430e:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b4310:	b106      	cbz	r6, b4314 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b4312:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b4314:	b125      	cbz	r5, b4320 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b4316:	4629      	mov	r1, r5
   b4318:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b431c:	f001 f81f 	bl	b535e <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b4320:	9b06      	ldr	r3, [sp, #24]
   b4322:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4324:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b4326:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b4328:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b432c:	2bff      	cmp	r3, #255	; 0xff
   b432e:	bfb8      	it	lt
   b4330:	23ff      	movlt	r3, #255	; 0xff
   b4332:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b4336:	b108      	cbz	r0, b433c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b4338:	f7ff feaf 	bl	b409a <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b433c:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b4340:	f7ff fea9 	bl	b4096 <_Znaj>
   b4344:	61e0      	str	r0, [r4, #28]
}
   b4346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4348 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b4348:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b434c:	4604      	mov	r4, r0
            bool thread) {
   b434e:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b4350:	4617      	mov	r7, r2
   b4352:	4698      	mov	r8, r3
   b4354:	460e      	mov	r6, r1
            bool thread) {
   b4356:	f001 fb15 	bl	b5984 <_ZN9TCPClientC1Ev>
   b435a:	490d      	ldr	r1, [pc, #52]	; (b4390 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b435c:	61e5      	str	r5, [r4, #28]
   b435e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4362:	f000 ffe8 	bl	b5336 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b4366:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b436a:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b436c:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b4370:	22ff      	movs	r2, #255	; 0xff
   b4372:	230f      	movs	r3, #15
   b4374:	e9cd 3200 	strd	r3, r2, [sp]
   b4378:	4620      	mov	r0, r4
            bool thread) {
   b437a:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b437e:	463b      	mov	r3, r7
   b4380:	462a      	mov	r2, r5
   b4382:	4631      	mov	r1, r6
   b4384:	f7ff ffb2 	bl	b42ec <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b4388:	4620      	mov	r0, r4
   b438a:	b004      	add	sp, #16
   b438c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4390:	000b6534 	.word	0x000b6534

000b4394 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b4394:	b510      	push	{r4, lr}
   b4396:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b4398:	4620      	mov	r0, r4
   b439a:	f001 fa4f 	bl	b583c <_ZN9TCPClient9availableEv>
   b439e:	2800      	cmp	r0, #0
   b43a0:	d0fa      	beq.n	b4398 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b43a2:	4620      	mov	r0, r4
   b43a4:	f001 f834 	bl	b5410 <_ZN9TCPClient4readEv>
}
   b43a8:	b2c0      	uxtb	r0, r0
   b43aa:	bd10      	pop	{r4, pc}

000b43ac <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b43ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b43b0:	4605      	mov	r5, r0
   b43b2:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b43b4:	f7ff ffee 	bl	b4394 <_ZN4MQTT8readByteEv>
   b43b8:	69eb      	ldr	r3, [r5, #28]
   b43ba:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b43bc:	69eb      	ldr	r3, [r5, #28]
   b43be:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b43c2:	f04f 0901 	mov.w	r9, #1
   b43c6:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b43ca:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b43cc:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b43ce:	4628      	mov	r0, r5
   b43d0:	f7ff ffe0 	bl	b4394 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b43d4:	4626      	mov	r6, r4
   b43d6:	69eb      	ldr	r3, [r5, #28]
   b43d8:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b43da:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b43de:	fb13 f309 	smulbb	r3, r3, r9
   b43e2:	441f      	add	r7, r3
        buffer[len++] = digit;
   b43e4:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b43e6:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b43e8:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b43ea:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b43ec:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b43f0:	d4ed      	bmi.n	b43ce <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b43f2:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b43f4:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b43f8:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b43fc:	d11e      	bne.n	b443c <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b43fe:	4628      	mov	r0, r5
   b4400:	f7ff ffc8 	bl	b4394 <_ZN4MQTT8readByteEv>
   b4404:	69eb      	ldr	r3, [r5, #28]
   b4406:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b4408:	4628      	mov	r0, r5
   b440a:	f7ff ffc3 	bl	b4394 <_ZN4MQTT8readByteEv>
   b440e:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b4410:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b4412:	b2b6      	uxth	r6, r6
   b4414:	69eb      	ldr	r3, [r5, #28]
   b4416:	b2a4      	uxth	r4, r4
   b4418:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b441a:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b441c:	b2b6      	uxth	r6, r6
   b441e:	42be      	cmp	r6, r7
   b4420:	d20e      	bcs.n	b4440 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b4422:	4628      	mov	r0, r5
   b4424:	f7ff ffb6 	bl	b4394 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b4428:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b442c:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b442e:	bf84      	itt	hi
   b4430:	69eb      	ldrhi	r3, [r5, #28]
   b4432:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b4434:	3401      	adds	r4, #1
   b4436:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b4438:	3601      	adds	r6, #1
   b443a:	e7ef      	b.n	b441c <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b443c:	2600      	movs	r6, #0
   b443e:	e7ed      	b.n	b441c <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b4440:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b4444:	42a3      	cmp	r3, r4
   b4446:	bf2c      	ite	cs
   b4448:	4620      	movcs	r0, r4
   b444a:	2000      	movcc	r0, #0
   b444c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4450 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4450:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4454:	4615      	mov	r5, r2
   b4456:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b4458:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b445a:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b445c:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b445e:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b4460:	a802      	add	r0, sp, #8
        digit = len % 128;
   b4462:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b4466:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b446a:	f103 0401 	add.w	r4, r3, #1
   b446e:	4403      	add	r3, r0
            digit |= 0x80;
   b4470:	bf88      	it	hi
   b4472:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b4476:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b447a:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b447e:	b2e4      	uxtb	r4, r4
   b4480:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b4484:	d81e      	bhi.n	b44c4 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b4486:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b448a:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b448e:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b4490:	4622      	mov	r2, r4
   b4492:	a901      	add	r1, sp, #4
   b4494:	4428      	add	r0, r5
    buf[4-llen] = header;
   b4496:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b449a:	f001 fd97 	bl	b5fcc <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b449e:	1c72      	adds	r2, r6, #1
   b44a0:	4422      	add	r2, r4
   b44a2:	4641      	mov	r1, r8
   b44a4:	4638      	mov	r0, r7
   b44a6:	f000 ff9e 	bl	b53e6 <_ZN9TCPClient5writeEPKhj>
   b44aa:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b44ac:	f000 fb72 	bl	b4b94 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b44b0:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b44b2:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b44b4:	4432      	add	r2, r6
   b44b6:	b2a8      	uxth	r0, r5
}
   b44b8:	1a13      	subs	r3, r2, r0
   b44ba:	4258      	negs	r0, r3
   b44bc:	4158      	adcs	r0, r3
   b44be:	b002      	add	sp, #8
   b44c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b44c4:	4623      	mov	r3, r4
   b44c6:	e7ca      	b.n	b445e <_ZN4MQTT5writeEhPht+0xe>

000b44c8 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b44c8:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b44ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   b44cc:	4605      	mov	r5, r0
    pos += 2;
   b44ce:	b298      	uxth	r0, r3
   b44d0:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b44d2:	5cce      	ldrb	r6, [r1, r3]
   b44d4:	b29c      	uxth	r4, r3
   b44d6:	b156      	cbz	r6, b44ee <_ZN4MQTT11writeStringEPKcPht+0x26>
   b44d8:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b44dc:	4584      	cmp	ip, r0
   b44de:	f103 0701 	add.w	r7, r3, #1
   b44e2:	d904      	bls.n	b44ee <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b44e4:	1c44      	adds	r4, r0, #1
   b44e6:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b44e8:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b44ea:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b44ec:	e7f1      	b.n	b44d2 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b44ee:	b299      	uxth	r1, r3
   b44f0:	1a41      	subs	r1, r0, r1
   b44f2:	440a      	add	r2, r1
   b44f4:	0a21      	lsrs	r1, r4, #8
   b44f6:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b44fa:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b44fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4500 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b4500:	b538      	push	{r3, r4, r5, lr}
   b4502:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b4504:	f001 f8bc 	bl	b5680 <_ZN9TCPClient9connectedEv>
   b4508:	2800      	cmp	r0, #0
   b450a:	bf14      	ite	ne
   b450c:	2501      	movne	r5, #1
   b450e:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b4510:	d102      	bne.n	b4518 <_ZN4MQTT11isConnectedEv+0x18>
   b4512:	4620      	mov	r0, r4
   b4514:	f001 f9ec 	bl	b58f0 <_ZN9TCPClient4stopEv>
    return rc;
}
   b4518:	4628      	mov	r0, r5
   b451a:	bd38      	pop	{r3, r4, r5, pc}

000b451c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b451c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4520:	b088      	sub	sp, #32
   b4522:	4604      	mov	r4, r0
   b4524:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b4528:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b452c:	4689      	mov	r9, r1
   b452e:	4617      	mov	r7, r2
   b4530:	461e      	mov	r6, r3
    if (!isConnected()) {
   b4532:	f7ff ffe5 	bl	b4500 <_ZN4MQTT11isConnectedEv>
   b4536:	4605      	mov	r5, r0
   b4538:	2800      	cmp	r0, #0
   b453a:	f040 80cd 	bne.w	b46d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b453e:	4621      	mov	r1, r4
   b4540:	a801      	add	r0, sp, #4
   b4542:	f7ff febd 	bl	b42c0 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b4546:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4548:	2900      	cmp	r1, #0
   b454a:	f040 8088 	bne.w	b465e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b454e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4552:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b4554:	462b      	mov	r3, r5
   b4556:	4620      	mov	r0, r4
   b4558:	f001 f814 	bl	b5584 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b455c:	2800      	cmp	r0, #0
   b455e:	d07a      	beq.n	b4656 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b4560:	2301      	movs	r3, #1
   b4562:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b4564:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4568:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b456a:	2b04      	cmp	r3, #4
   b456c:	4b5b      	ldr	r3, [pc, #364]	; (b46dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b456e:	f040 8081 	bne.w	b4674 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b4572:	6818      	ldr	r0, [r3, #0]
   b4574:	8899      	ldrh	r1, [r3, #4]
   b4576:	799b      	ldrb	r3, [r3, #6]
   b4578:	f8ad 100c 	strh.w	r1, [sp, #12]
   b457c:	f88d 300e 	strb.w	r3, [sp, #14]
   b4580:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4582:	f8c2 0005 	str.w	r0, [r2, #5]
   b4586:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b458a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b458e:	f8a2 1009 	strh.w	r1, [r2, #9]
   b4592:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b4594:	230c      	movs	r3, #12
            if (willTopic) {
   b4596:	f1b8 0f00 	cmp.w	r8, #0
   b459a:	f000 8081 	beq.w	b46a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b459e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b45a2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b45a6:	0140      	lsls	r0, r0, #5
   b45a8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b45ac:	f040 0006 	orr.w	r0, r0, #6
   b45b0:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b45b2:	f1ba 0f00 	cmp.w	sl, #0
   b45b6:	d101      	bne.n	b45bc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b45b8:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b45bc:	b11f      	cbz	r7, b45c6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b45be:	2e00      	cmp	r6, #0
   b45c0:	d170      	bne.n	b46a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b45c2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b45c6:	69e2      	ldr	r2, [r4, #28]
   b45c8:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b45ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b45cc:	69e1      	ldr	r1, [r4, #28]
   b45ce:	1c58      	adds	r0, r3, #1
   b45d0:	1212      	asrs	r2, r2, #8
   b45d2:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b45d4:	1c9a      	adds	r2, r3, #2
   b45d6:	69e1      	ldr	r1, [r4, #28]
   b45d8:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b45da:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b45dc:	3303      	adds	r3, #3
   b45de:	69e2      	ldr	r2, [r4, #28]
   b45e0:	4649      	mov	r1, r9
   b45e2:	4620      	mov	r0, r4
   b45e4:	f7ff ff70 	bl	b44c8 <_ZN4MQTT11writeStringEPKcPht>
   b45e8:	4603      	mov	r3, r0
            if (willTopic) {
   b45ea:	f1b8 0f00 	cmp.w	r8, #0
   b45ee:	d00b      	beq.n	b4608 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b45f0:	69e2      	ldr	r2, [r4, #28]
   b45f2:	4641      	mov	r1, r8
   b45f4:	4620      	mov	r0, r4
   b45f6:	f7ff ff67 	bl	b44c8 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b45fa:	69e2      	ldr	r2, [r4, #28]
   b45fc:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b45fe:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b4600:	4620      	mov	r0, r4
   b4602:	f7ff ff61 	bl	b44c8 <_ZN4MQTT11writeStringEPKcPht>
   b4606:	4603      	mov	r3, r0
            if(user != NULL) {
   b4608:	b167      	cbz	r7, b4624 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b460a:	69e2      	ldr	r2, [r4, #28]
   b460c:	4639      	mov	r1, r7
   b460e:	4620      	mov	r0, r4
   b4610:	f7ff ff5a 	bl	b44c8 <_ZN4MQTT11writeStringEPKcPht>
   b4614:	4603      	mov	r3, r0
                if(pass != NULL) {
   b4616:	b12e      	cbz	r6, b4624 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b4618:	69e2      	ldr	r2, [r4, #28]
   b461a:	4631      	mov	r1, r6
   b461c:	4620      	mov	r0, r4
   b461e:	f7ff ff53 	bl	b44c8 <_ZN4MQTT11writeStringEPKcPht>
   b4622:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b4624:	3b05      	subs	r3, #5
   b4626:	69e2      	ldr	r2, [r4, #28]
   b4628:	b29b      	uxth	r3, r3
   b462a:	2110      	movs	r1, #16
   b462c:	4620      	mov	r0, r4
   b462e:	f7ff ff0f 	bl	b4450 <_ZN4MQTT5writeEhPht>
   b4632:	f000 faaf 	bl	b4b94 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b4636:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b463a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b463e:	4620      	mov	r0, r4
   b4640:	f001 f8fc 	bl	b583c <_ZN9TCPClient9availableEv>
   b4644:	bb88      	cbnz	r0, b46aa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b4646:	f000 faa5 	bl	b4b94 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b464a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b464c:	1ac0      	subs	r0, r0, r3
   b464e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4650:	4373      	muls	r3, r6
   b4652:	4298      	cmp	r0, r3
   b4654:	d9f3      	bls.n	b463e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b4656:	4620      	mov	r0, r4
   b4658:	f001 f94a 	bl	b58f0 <_ZN9TCPClient4stopEv>
   b465c:	e035      	b.n	b46ca <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b465e:	a802      	add	r0, sp, #8
   b4660:	f000 fd04 	bl	b506c <_ZN9IPAddressC1EPKh>
   b4664:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4668:	462b      	mov	r3, r5
   b466a:	a902      	add	r1, sp, #8
   b466c:	4620      	mov	r0, r4
   b466e:	f001 f869 	bl	b5744 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4672:	e773      	b.n	b455c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b4674:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b4678:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b467c:	7bdb      	ldrb	r3, [r3, #15]
   b467e:	f10d 0c08 	add.w	ip, sp, #8
   b4682:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b4686:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b468a:	ab02      	add	r3, sp, #8
   b468c:	cb03      	ldmia	r3!, {r0, r1}
   b468e:	f8c2 0005 	str.w	r0, [r2, #5]
   b4692:	f8c2 1009 	str.w	r1, [r2, #9]
   b4696:	f89c 3000 	ldrb.w	r3, [ip]
   b469a:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b469c:	230e      	movs	r3, #14
   b469e:	e77a      	b.n	b4596 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b46a0:	2002      	movs	r0, #2
   b46a2:	e786      	b.n	b45b2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b46a4:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b46a8:	e78d      	b.n	b45c6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b46aa:	a902      	add	r1, sp, #8
   b46ac:	4620      	mov	r0, r4
   b46ae:	f7ff fe7d 	bl	b43ac <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b46b2:	2804      	cmp	r0, #4
   b46b4:	d1cf      	bne.n	b4656 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b46b6:	69e3      	ldr	r3, [r4, #28]
   b46b8:	78de      	ldrb	r6, [r3, #3]
   b46ba:	2e00      	cmp	r6, #0
   b46bc:	d1cb      	bne.n	b4656 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b46be:	f000 fa69 	bl	b4b94 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b46c2:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b46c4:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b46c6:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b46ca:	a801      	add	r0, sp, #4
   b46cc:	f7ff fe03 	bl	b42d6 <_ZN4MQTT11MutexLockerD1Ev>
}
   b46d0:	4628      	mov	r0, r5
   b46d2:	b008      	add	sp, #32
   b46d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b46d8:	2500      	movs	r5, #0
   b46da:	e7f9      	b.n	b46d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b46dc:	000b61ee 	.word	0x000b61ee

000b46e0 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b46e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b46e2:	2301      	movs	r3, #1
   b46e4:	2204      	movs	r2, #4
   b46e6:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b46ea:	2300      	movs	r3, #0
   b46ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b46f0:	e9cd 3300 	strd	r3, r3, [sp]
   b46f4:	461a      	mov	r2, r3
   b46f6:	f7ff ff11 	bl	b451c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b46fa:	b007      	add	sp, #28
   b46fc:	f85d fb04 	ldr.w	pc, [sp], #4

000b4700 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4704:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b4708:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b470c:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b4710:	4604      	mov	r4, r0
   b4712:	468b      	mov	fp, r1
   b4714:	4616      	mov	r6, r2
   b4716:	461f      	mov	r7, r3
    if (isConnected()) {
   b4718:	f7ff fef2 	bl	b4500 <_ZN4MQTT11isConnectedEv>
   b471c:	4682      	mov	sl, r0
   b471e:	2800      	cmp	r0, #0
   b4720:	d051      	beq.n	b47c6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b4722:	4621      	mov	r1, r4
   b4724:	a801      	add	r0, sp, #4
   b4726:	f7ff fdcb 	bl	b42c0 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b472a:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b472e:	69e0      	ldr	r0, [r4, #28]
   b4730:	2100      	movs	r1, #0
   b4732:	f001 fc59 	bl	b5fe8 <memset>
        length = writeString(topic, buffer, length);
   b4736:	2305      	movs	r3, #5
   b4738:	69e2      	ldr	r2, [r4, #28]
   b473a:	4659      	mov	r1, fp
   b473c:	4620      	mov	r0, r4
   b473e:	f7ff fec3 	bl	b44c8 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b4742:	1e6b      	subs	r3, r5, #1
   b4744:	2b01      	cmp	r3, #1
   b4746:	d815      	bhi.n	b4774 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b4748:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b474a:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b474c:	3101      	adds	r1, #1
   b474e:	b289      	uxth	r1, r1
   b4750:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4752:	0a09      	lsrs	r1, r1, #8
   b4754:	5419      	strb	r1, [r3, r0]
   b4756:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b4758:	69e3      	ldr	r3, [r4, #28]
   b475a:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b475c:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b475e:	3002      	adds	r0, #2
   b4760:	5499      	strb	r1, [r3, r2]
   b4762:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b4764:	f1b8 0f00 	cmp.w	r8, #0
   b4768:	d004      	beq.n	b4774 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b476a:	8c23      	ldrh	r3, [r4, #32]
   b476c:	1c5a      	adds	r2, r3, #1
   b476e:	8422      	strh	r2, [r4, #32]
   b4770:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4774:	2100      	movs	r1, #0
   b4776:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4778:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b477a:	69e2      	ldr	r2, [r4, #28]
   b477c:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b477e:	d90a      	bls.n	b4796 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b4780:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b4784:	459c      	cmp	ip, r3
   b4786:	d906      	bls.n	b4796 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b4788:	f816 c001 	ldrb.w	ip, [r6, r1]
   b478c:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4790:	3101      	adds	r1, #1
   b4792:	b289      	uxth	r1, r1
   b4794:	e7ef      	b.n	b4776 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b4796:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b479a:	2900      	cmp	r1, #0
   b479c:	bf0c      	ite	eq
   b479e:	2130      	moveq	r1, #48	; 0x30
   b47a0:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b47a2:	f1b9 0f00 	cmp.w	r9, #0
   b47a6:	d001      	beq.n	b47ac <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b47a8:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b47ac:	2d02      	cmp	r5, #2
   b47ae:	d10e      	bne.n	b47ce <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b47b0:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b47b4:	3b05      	subs	r3, #5
   b47b6:	b29b      	uxth	r3, r3
   b47b8:	4620      	mov	r0, r4
   b47ba:	f7ff fe49 	bl	b4450 <_ZN4MQTT5writeEhPht>
   b47be:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b47c0:	a801      	add	r0, sp, #4
   b47c2:	f7ff fd88 	bl	b42d6 <_ZN4MQTT11MutexLockerD1Ev>
}
   b47c6:	4650      	mov	r0, sl
   b47c8:	b003      	add	sp, #12
   b47ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b47ce:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b47d0:	bf08      	it	eq
   b47d2:	f041 0102 	orreq.w	r1, r1, #2
   b47d6:	e7ed      	b.n	b47b4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b47d8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b47d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b47da:	9c08      	ldr	r4, [sp, #32]
   b47dc:	9403      	str	r4, [sp, #12]
   b47de:	2400      	movs	r4, #0
   b47e0:	9402      	str	r4, [sp, #8]
   b47e2:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b47e6:	9401      	str	r4, [sp, #4]
   b47e8:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b47ec:	9400      	str	r4, [sp, #0]
   b47ee:	f7ff ff87 	bl	b4700 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b47f2:	b004      	add	sp, #16
   b47f4:	bd10      	pop	{r4, pc}

000b47f6 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b47f6:	b530      	push	{r4, r5, lr}
   b47f8:	b087      	sub	sp, #28
   b47fa:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b47fc:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b47fe:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4800:	9204      	str	r2, [sp, #16]
   b4802:	f001 fc31 	bl	b6068 <strlen>
   b4806:	2500      	movs	r5, #0
   b4808:	4603      	mov	r3, r0
   b480a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b480e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b4812:	9500      	str	r5, [sp, #0]
   b4814:	4620      	mov	r0, r4
   b4816:	f7ff ffdf 	bl	b47d8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b481a:	b007      	add	sp, #28
   b481c:	bd30      	pop	{r4, r5, pc}

000b481e <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b481e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4820:	4604      	mov	r4, r0
   b4822:	460e      	mov	r6, r1
    if (isConnected()) {
   b4824:	f7ff fe6c 	bl	b4500 <_ZN4MQTT11isConnectedEv>
   b4828:	4605      	mov	r5, r0
   b482a:	b1c8      	cbz	r0, b4860 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b482c:	4621      	mov	r1, r4
   b482e:	a801      	add	r0, sp, #4
   b4830:	f7ff fd46 	bl	b42c0 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b4834:	69e3      	ldr	r3, [r4, #28]
   b4836:	2262      	movs	r2, #98	; 0x62
   b4838:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b483a:	69e3      	ldr	r3, [r4, #28]
   b483c:	2202      	movs	r2, #2
   b483e:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4840:	69e3      	ldr	r3, [r4, #28]
   b4842:	0a32      	lsrs	r2, r6, #8
   b4844:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b4846:	69e3      	ldr	r3, [r4, #28]
   b4848:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b484a:	69e1      	ldr	r1, [r4, #28]
   b484c:	2204      	movs	r2, #4
   b484e:	4620      	mov	r0, r4
   b4850:	f000 fdc9 	bl	b53e6 <_ZN9TCPClient5writeEPKhj>
   b4854:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b4856:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4858:	bf18      	it	ne
   b485a:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b485c:	f7ff fd3b 	bl	b42d6 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4860:	4628      	mov	r0, r5
   b4862:	b002      	add	sp, #8
   b4864:	bd70      	pop	{r4, r5, r6, pc}

000b4866 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b4866:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4868:	4604      	mov	r4, r0
   b486a:	460e      	mov	r6, r1
    if (isConnected()) {
   b486c:	f7ff fe48 	bl	b4500 <_ZN4MQTT11isConnectedEv>
   b4870:	4605      	mov	r5, r0
   b4872:	b1c8      	cbz	r0, b48a8 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b4874:	4621      	mov	r1, r4
   b4876:	a801      	add	r0, sp, #4
   b4878:	f7ff fd22 	bl	b42c0 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b487c:	69e3      	ldr	r3, [r4, #28]
   b487e:	2272      	movs	r2, #114	; 0x72
   b4880:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4882:	69e3      	ldr	r3, [r4, #28]
   b4884:	2202      	movs	r2, #2
   b4886:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4888:	69e3      	ldr	r3, [r4, #28]
   b488a:	0a32      	lsrs	r2, r6, #8
   b488c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b488e:	69e3      	ldr	r3, [r4, #28]
   b4890:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4892:	69e1      	ldr	r1, [r4, #28]
   b4894:	2204      	movs	r2, #4
   b4896:	4620      	mov	r0, r4
   b4898:	f000 fda5 	bl	b53e6 <_ZN9TCPClient5writeEPKhj>
   b489c:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b489e:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b48a0:	bf18      	it	ne
   b48a2:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b48a4:	f7ff fd17 	bl	b42d6 <_ZN4MQTT11MutexLockerD1Ev>
}
   b48a8:	4628      	mov	r0, r5
   b48aa:	b002      	add	sp, #8
   b48ac:	bd70      	pop	{r4, r5, r6, pc}

000b48ae <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b48ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b48b2:	ed2d 8b02 	vpush	{d8}
   b48b6:	b087      	sub	sp, #28
   b48b8:	af00      	add	r7, sp, #0
   b48ba:	4604      	mov	r4, r0
    if (isConnected()) {
   b48bc:	f7ff fe20 	bl	b4500 <_ZN4MQTT11isConnectedEv>
   b48c0:	4681      	mov	r9, r0
   b48c2:	b1f8      	cbz	r0, b4904 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b48c4:	4621      	mov	r1, r4
   b48c6:	f107 0014 	add.w	r0, r7, #20
   b48ca:	f7ff fcf9 	bl	b42c0 <_ZN4MQTT11MutexLockerC1EPS_>
   b48ce:	f000 f961 	bl	b4b94 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b48d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b48d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b48d8:	4353      	muls	r3, r2
   b48da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b48dc:	1a82      	subs	r2, r0, r2
   b48de:	429a      	cmp	r2, r3
   b48e0:	4606      	mov	r6, r0
   b48e2:	d803      	bhi.n	b48ec <_ZN4MQTT4loopEv+0x3e>
   b48e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b48e6:	1a82      	subs	r2, r0, r2
   b48e8:	4293      	cmp	r3, r2
   b48ea:	d221      	bcs.n	b4930 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b48ec:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b48f0:	b17b      	cbz	r3, b4912 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b48f2:	4620      	mov	r0, r4
   b48f4:	f000 fffc 	bl	b58f0 <_ZN9TCPClient4stopEv>
                return false;
   b48f8:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b48fc:	f107 0014 	add.w	r0, r7, #20
   b4900:	f7ff fce9 	bl	b42d6 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4904:	4648      	mov	r0, r9
   b4906:	371c      	adds	r7, #28
   b4908:	46bd      	mov	sp, r7
   b490a:	ecbd 8b02 	vpop	{d8}
   b490e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b4912:	69e2      	ldr	r2, [r4, #28]
   b4914:	21c0      	movs	r1, #192	; 0xc0
   b4916:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b4918:	69e2      	ldr	r2, [r4, #28]
   b491a:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b491c:	69e1      	ldr	r1, [r4, #28]
   b491e:	2202      	movs	r2, #2
   b4920:	4620      	mov	r0, r4
   b4922:	f000 fd60 	bl	b53e6 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b4926:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b492a:	2301      	movs	r3, #1
   b492c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b4930:	4620      	mov	r0, r4
   b4932:	f000 ff83 	bl	b583c <_ZN9TCPClient9availableEv>
   b4936:	2800      	cmp	r0, #0
   b4938:	d0e0      	beq.n	b48fc <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b493a:	f107 0113 	add.w	r1, r7, #19
   b493e:	4620      	mov	r0, r4
   b4940:	f7ff fd34 	bl	b43ac <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b4944:	4683      	mov	fp, r0
   b4946:	2800      	cmp	r0, #0
   b4948:	d0d8      	beq.n	b48fc <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b494a:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b494c:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b494e:	7819      	ldrb	r1, [r3, #0]
   b4950:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b4954:	2a30      	cmp	r2, #48	; 0x30
   b4956:	d17f      	bne.n	b4a58 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b4958:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b495c:	f1ba 0f00 	cmp.w	sl, #0
   b4960:	d0cc      	beq.n	b48fc <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4962:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b4966:	466a      	mov	r2, sp
   b4968:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b496c:	eb03 020c 	add.w	r2, r3, ip
   b4970:	7851      	ldrb	r1, [r2, #1]
   b4972:	7895      	ldrb	r5, [r2, #2]
   b4974:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b4978:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b497a:	f105 0208 	add.w	r2, r5, #8
   b497e:	4669      	mov	r1, sp
   b4980:	08d2      	lsrs	r2, r2, #3
   b4982:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b4986:	4695      	mov	sp, r2
   b4988:	f10c 0203 	add.w	r2, ip, #3
   b498c:	60fa      	str	r2, [r7, #12]
   b498e:	eb03 0e02 	add.w	lr, r3, r2
   b4992:	eb0d 0205 	add.w	r2, sp, r5
   b4996:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b4998:	f8c7 d008 	str.w	sp, [r7, #8]
   b499c:	607a      	str	r2, [r7, #4]
   b499e:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b49a2:	428a      	cmp	r2, r1
   b49a4:	d006      	beq.n	b49b4 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b49a6:	460a      	mov	r2, r1
   b49a8:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b49ac:	f802 8b01 	strb.w	r8, [r2], #1
   b49b0:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b49b2:	e7f4      	b.n	b499e <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b49b4:	2200      	movs	r2, #0
   b49b6:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b49b8:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b49bc:	68f9      	ldr	r1, [r7, #12]
   b49be:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b49c2:	ebab 020c 	sub.w	r2, fp, ip
   b49c6:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b49c8:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b49cc:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b49d0:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b49d2:	d125      	bne.n	b4a20 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b49d4:	f813 e001 	ldrb.w	lr, [r3, r1]
   b49d8:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b49da:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b49dc:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b49e0:	f10c 0105 	add.w	r1, ip, #5
   b49e4:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b49e6:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b49e8:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b49ec:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b49ee:	69e3      	ldr	r3, [r4, #28]
   b49f0:	2240      	movs	r2, #64	; 0x40
   b49f2:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b49f4:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b49f6:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b49fa:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b49fe:	69e3      	ldr	r3, [r4, #28]
   b4a00:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b4a04:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b4a06:	69e3      	ldr	r3, [r4, #28]
   b4a08:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b4a0c:	69e1      	ldr	r1, [r4, #28]
   b4a0e:	2204      	movs	r2, #4
   b4a10:	4620      	mov	r0, r4
   b4a12:	f000 fce8 	bl	b53e6 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b4a16:	6266      	str	r6, [r4, #36]	; 0x24
   b4a18:	ee18 3a10 	vmov	r3, s16
   b4a1c:	469d      	mov	sp, r3
   b4a1e:	e76d      	b.n	b48fc <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b4a20:	f1b8 0f04 	cmp.w	r8, #4
   b4a24:	d115      	bne.n	b4a52 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4a26:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4a2a:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4a2c:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4a2e:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b4a32:	f10c 0105 	add.w	r1, ip, #5
   b4a36:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4a38:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4a3a:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4a3e:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b4a40:	69e3      	ldr	r3, [r4, #28]
   b4a42:	2250      	movs	r2, #80	; 0x50
   b4a44:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b4a46:	69e3      	ldr	r3, [r4, #28]
   b4a48:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4a4a:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b4a4e:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b4a50:	e7d5      	b.n	b49fe <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b4a52:	4419      	add	r1, r3
   b4a54:	47d0      	blx	sl
   b4a56:	e7df      	b.n	b4a18 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b4a58:	2a50      	cmp	r2, #80	; 0x50
   b4a5a:	d108      	bne.n	b4a6e <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b4a5c:	789a      	ldrb	r2, [r3, #2]
   b4a5e:	78d9      	ldrb	r1, [r3, #3]
   b4a60:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b4a64:	b289      	uxth	r1, r1
   b4a66:	4620      	mov	r0, r4
   b4a68:	f7ff fed9 	bl	b481e <_ZN4MQTT14publishReleaseEt>
   b4a6c:	e746      	b.n	b48fc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b4a6e:	2a40      	cmp	r2, #64	; 0x40
   b4a70:	d112      	bne.n	b4a98 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b4a72:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b4a74:	2a00      	cmp	r2, #0
   b4a76:	f43f af41 	beq.w	b48fc <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b4a7a:	f1bb 0f04 	cmp.w	fp, #4
   b4a7e:	f47f af3d 	bne.w	b48fc <_ZN4MQTT4loopEv+0x4e>
   b4a82:	f011 0f06 	tst.w	r1, #6
   b4a86:	f47f af39 	bne.w	b48fc <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b4a8a:	7899      	ldrb	r1, [r3, #2]
   b4a8c:	78d8      	ldrb	r0, [r3, #3]
   b4a8e:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b4a92:	b280      	uxth	r0, r0
   b4a94:	4790      	blx	r2
   b4a96:	e731      	b.n	b48fc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b4a98:	2a60      	cmp	r2, #96	; 0x60
   b4a9a:	d108      	bne.n	b4aae <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b4a9c:	789a      	ldrb	r2, [r3, #2]
   b4a9e:	78d9      	ldrb	r1, [r3, #3]
   b4aa0:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b4aa4:	b289      	uxth	r1, r1
   b4aa6:	4620      	mov	r0, r4
   b4aa8:	f7ff fedd 	bl	b4866 <_ZN4MQTT15publishCompleteEt>
   b4aac:	e726      	b.n	b48fc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b4aae:	2a70      	cmp	r2, #112	; 0x70
   b4ab0:	d0df      	beq.n	b4a72 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b4ab2:	2a90      	cmp	r2, #144	; 0x90
   b4ab4:	f43f af22 	beq.w	b48fc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b4ab8:	2ac0      	cmp	r2, #192	; 0xc0
   b4aba:	d10a      	bne.n	b4ad2 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b4abc:	22d0      	movs	r2, #208	; 0xd0
   b4abe:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b4ac0:	69e3      	ldr	r3, [r4, #28]
   b4ac2:	2200      	movs	r2, #0
   b4ac4:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b4ac6:	69e1      	ldr	r1, [r4, #28]
   b4ac8:	2202      	movs	r2, #2
   b4aca:	4620      	mov	r0, r4
   b4acc:	f000 fc8b 	bl	b53e6 <_ZN9TCPClient5writeEPKhj>
   b4ad0:	e714      	b.n	b48fc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b4ad2:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b4ad4:	bf04      	itt	eq
   b4ad6:	2300      	moveq	r3, #0
   b4ad8:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b4adc:	e70e      	b.n	b48fc <_ZN4MQTT4loopEv+0x4e>

000b4ade <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b4ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4ae0:	4604      	mov	r4, r0
   b4ae2:	460f      	mov	r7, r1
   b4ae4:	4616      	mov	r6, r2
    if (isConnected()) {
   b4ae6:	f7ff fd0b 	bl	b4500 <_ZN4MQTT11isConnectedEv>
   b4aea:	4605      	mov	r5, r0
   b4aec:	b310      	cbz	r0, b4b34 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b4aee:	4621      	mov	r1, r4
   b4af0:	a801      	add	r0, sp, #4
   b4af2:	f7ff fbe5 	bl	b42c0 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b4af6:	8c23      	ldrh	r3, [r4, #32]
   b4af8:	3301      	adds	r3, #1
   b4afa:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b4afc:	b1eb      	cbz	r3, b4b3a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b4afe:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b4b00:	8c23      	ldrh	r3, [r4, #32]
   b4b02:	69e2      	ldr	r2, [r4, #28]
   b4b04:	0a1b      	lsrs	r3, r3, #8
   b4b06:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b4b08:	69e3      	ldr	r3, [r4, #28]
   b4b0a:	8c22      	ldrh	r2, [r4, #32]
   b4b0c:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b4b0e:	69e2      	ldr	r2, [r4, #28]
   b4b10:	2307      	movs	r3, #7
   b4b12:	4639      	mov	r1, r7
   b4b14:	4620      	mov	r0, r4
   b4b16:	f7ff fcd7 	bl	b44c8 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b4b1a:	69e3      	ldr	r3, [r4, #28]
   b4b1c:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b4b1e:	3804      	subs	r0, #4
   b4b20:	b283      	uxth	r3, r0
   b4b22:	69e2      	ldr	r2, [r4, #28]
   b4b24:	2182      	movs	r1, #130	; 0x82
   b4b26:	4620      	mov	r0, r4
   b4b28:	f7ff fc92 	bl	b4450 <_ZN4MQTT5writeEhPht>
   b4b2c:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b4b2e:	a801      	add	r0, sp, #4
   b4b30:	f7ff fbd1 	bl	b42d6 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4b34:	4628      	mov	r0, r5
   b4b36:	b003      	add	sp, #12
   b4b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b4b3a:	2301      	movs	r3, #1
   b4b3c:	e7df      	b.n	b4afe <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b4b3e <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b4b3e:	2200      	movs	r2, #0
   b4b40:	f7ff bfcd 	b.w	b4ade <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b4b44 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b4b44:	b508      	push	{r3, lr}
   b4b46:	4b02      	ldr	r3, [pc, #8]	; (b4b50 <os_mutex_create+0xc>)
   b4b48:	681b      	ldr	r3, [r3, #0]
   b4b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b4c:	9301      	str	r3, [sp, #4]
   b4b4e:	bd08      	pop	{r3, pc}
   b4b50:	00030248 	.word	0x00030248

000b4b54 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b4b54:	b508      	push	{r3, lr}
   b4b56:	4b02      	ldr	r3, [pc, #8]	; (b4b60 <os_mutex_lock+0xc>)
   b4b58:	681b      	ldr	r3, [r3, #0]
   b4b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4b5c:	9301      	str	r3, [sp, #4]
   b4b5e:	bd08      	pop	{r3, pc}
   b4b60:	00030248 	.word	0x00030248

000b4b64 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b4b64:	b508      	push	{r3, lr}
   b4b66:	4b02      	ldr	r3, [pc, #8]	; (b4b70 <os_mutex_unlock+0xc>)
   b4b68:	681b      	ldr	r3, [r3, #0]
   b4b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b6c:	9301      	str	r3, [sp, #4]
   b4b6e:	bd08      	pop	{r3, pc}
   b4b70:	00030248 	.word	0x00030248

000b4b74 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4b74:	b508      	push	{r3, lr}
   b4b76:	4b02      	ldr	r3, [pc, #8]	; (b4b80 <os_mutex_recursive_create+0xc>)
   b4b78:	681b      	ldr	r3, [r3, #0]
   b4b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4b7c:	9301      	str	r3, [sp, #4]
   b4b7e:	bd08      	pop	{r3, pc}
   b4b80:	00030248 	.word	0x00030248

000b4b84 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4b84:	b508      	push	{r3, lr}
   b4b86:	4b02      	ldr	r3, [pc, #8]	; (b4b90 <HAL_RNG_GetRandomNumber+0xc>)
   b4b88:	681b      	ldr	r3, [r3, #0]
   b4b8a:	685b      	ldr	r3, [r3, #4]
   b4b8c:	9301      	str	r3, [sp, #4]
   b4b8e:	bd08      	pop	{r3, pc}
   b4b90:	00030218 	.word	0x00030218

000b4b94 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4b94:	b508      	push	{r3, lr}
   b4b96:	4b02      	ldr	r3, [pc, #8]	; (b4ba0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4b98:	681b      	ldr	r3, [r3, #0]
   b4b9a:	695b      	ldr	r3, [r3, #20]
   b4b9c:	9301      	str	r3, [sp, #4]
   b4b9e:	bd08      	pop	{r3, pc}
   b4ba0:	00030218 	.word	0x00030218

000b4ba4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4ba4:	b508      	push	{r3, lr}
   b4ba6:	4b02      	ldr	r3, [pc, #8]	; (b4bb0 <if_index_to_name+0xc>)
   b4ba8:	681b      	ldr	r3, [r3, #0]
   b4baa:	695b      	ldr	r3, [r3, #20]
   b4bac:	9301      	str	r3, [sp, #4]
   b4bae:	bd08      	pop	{r3, pc}
   b4bb0:	0003026c 	.word	0x0003026c

000b4bb4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4bb4:	b508      	push	{r3, lr}
   b4bb6:	4b02      	ldr	r3, [pc, #8]	; (b4bc0 <inet_inet_ntop+0xc>)
   b4bb8:	681b      	ldr	r3, [r3, #0]
   b4bba:	695b      	ldr	r3, [r3, #20]
   b4bbc:	9301      	str	r3, [sp, #4]
   b4bbe:	bd08      	pop	{r3, pc}
   b4bc0:	00030264 	.word	0x00030264

000b4bc4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4bc4:	b508      	push	{r3, lr}
   b4bc6:	4b02      	ldr	r3, [pc, #8]	; (b4bd0 <inet_htonl+0xc>)
   b4bc8:	681b      	ldr	r3, [r3, #0]
   b4bca:	6a1b      	ldr	r3, [r3, #32]
   b4bcc:	9301      	str	r3, [sp, #4]
   b4bce:	bd08      	pop	{r3, pc}
   b4bd0:	00030264 	.word	0x00030264

000b4bd4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4bd4:	b508      	push	{r3, lr}
   b4bd6:	4b02      	ldr	r3, [pc, #8]	; (b4be0 <inet_htons+0xc>)
   b4bd8:	681b      	ldr	r3, [r3, #0]
   b4bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4bdc:	9301      	str	r3, [sp, #4]
   b4bde:	bd08      	pop	{r3, pc}
   b4be0:	00030264 	.word	0x00030264

000b4be4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4be4:	b508      	push	{r3, lr}
   b4be6:	4b02      	ldr	r3, [pc, #8]	; (b4bf0 <netdb_freeaddrinfo+0xc>)
   b4be8:	681b      	ldr	r3, [r3, #0]
   b4bea:	689b      	ldr	r3, [r3, #8]
   b4bec:	9301      	str	r3, [sp, #4]
   b4bee:	bd08      	pop	{r3, pc}
   b4bf0:	00030268 	.word	0x00030268

000b4bf4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4bf4:	b508      	push	{r3, lr}
   b4bf6:	4b02      	ldr	r3, [pc, #8]	; (b4c00 <netdb_getaddrinfo+0xc>)
   b4bf8:	681b      	ldr	r3, [r3, #0]
   b4bfa:	68db      	ldr	r3, [r3, #12]
   b4bfc:	9301      	str	r3, [sp, #4]
   b4bfe:	bd08      	pop	{r3, pc}
   b4c00:	00030268 	.word	0x00030268

000b4c04 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4c04:	b508      	push	{r3, lr}
   b4c06:	4b02      	ldr	r3, [pc, #8]	; (b4c10 <sock_setsockopt+0xc>)
   b4c08:	681b      	ldr	r3, [r3, #0]
   b4c0a:	699b      	ldr	r3, [r3, #24]
   b4c0c:	9301      	str	r3, [sp, #4]
   b4c0e:	bd08      	pop	{r3, pc}
   b4c10:	00030238 	.word	0x00030238

000b4c14 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4c14:	b508      	push	{r3, lr}
   b4c16:	4b02      	ldr	r3, [pc, #8]	; (b4c20 <sock_close+0xc>)
   b4c18:	681b      	ldr	r3, [r3, #0]
   b4c1a:	69db      	ldr	r3, [r3, #28]
   b4c1c:	9301      	str	r3, [sp, #4]
   b4c1e:	bd08      	pop	{r3, pc}
   b4c20:	00030238 	.word	0x00030238

000b4c24 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4c24:	b508      	push	{r3, lr}
   b4c26:	4b02      	ldr	r3, [pc, #8]	; (b4c30 <sock_connect+0xc>)
   b4c28:	681b      	ldr	r3, [r3, #0]
   b4c2a:	6a1b      	ldr	r3, [r3, #32]
   b4c2c:	9301      	str	r3, [sp, #4]
   b4c2e:	bd08      	pop	{r3, pc}
   b4c30:	00030238 	.word	0x00030238

000b4c34 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4c34:	b508      	push	{r3, lr}
   b4c36:	4b02      	ldr	r3, [pc, #8]	; (b4c40 <sock_recv+0xc>)
   b4c38:	681b      	ldr	r3, [r3, #0]
   b4c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4c3c:	9301      	str	r3, [sp, #4]
   b4c3e:	bd08      	pop	{r3, pc}
   b4c40:	00030238 	.word	0x00030238

000b4c44 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4c44:	b508      	push	{r3, lr}
   b4c46:	4b02      	ldr	r3, [pc, #8]	; (b4c50 <sock_send+0xc>)
   b4c48:	681b      	ldr	r3, [r3, #0]
   b4c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c4c:	9301      	str	r3, [sp, #4]
   b4c4e:	bd08      	pop	{r3, pc}
   b4c50:	00030238 	.word	0x00030238

000b4c54 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4c54:	b508      	push	{r3, lr}
   b4c56:	4b02      	ldr	r3, [pc, #8]	; (b4c60 <sock_socket+0xc>)
   b4c58:	681b      	ldr	r3, [r3, #0]
   b4c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4c5c:	9301      	str	r3, [sp, #4]
   b4c5e:	bd08      	pop	{r3, pc}
   b4c60:	00030238 	.word	0x00030238

000b4c64 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4c64:	b508      	push	{r3, lr}
   b4c66:	4b02      	ldr	r3, [pc, #8]	; (b4c70 <hal_usart_write+0xc>)
   b4c68:	681b      	ldr	r3, [r3, #0]
   b4c6a:	68db      	ldr	r3, [r3, #12]
   b4c6c:	9301      	str	r3, [sp, #4]
   b4c6e:	bd08      	pop	{r3, pc}
   b4c70:	0003023c 	.word	0x0003023c

000b4c74 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4c74:	b508      	push	{r3, lr}
   b4c76:	4b02      	ldr	r3, [pc, #8]	; (b4c80 <hal_usart_available+0xc>)
   b4c78:	681b      	ldr	r3, [r3, #0]
   b4c7a:	691b      	ldr	r3, [r3, #16]
   b4c7c:	9301      	str	r3, [sp, #4]
   b4c7e:	bd08      	pop	{r3, pc}
   b4c80:	0003023c 	.word	0x0003023c

000b4c84 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4c84:	b508      	push	{r3, lr}
   b4c86:	4b02      	ldr	r3, [pc, #8]	; (b4c90 <hal_usart_read+0xc>)
   b4c88:	681b      	ldr	r3, [r3, #0]
   b4c8a:	695b      	ldr	r3, [r3, #20]
   b4c8c:	9301      	str	r3, [sp, #4]
   b4c8e:	bd08      	pop	{r3, pc}
   b4c90:	0003023c 	.word	0x0003023c

000b4c94 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4c94:	b508      	push	{r3, lr}
   b4c96:	4b02      	ldr	r3, [pc, #8]	; (b4ca0 <hal_usart_peek+0xc>)
   b4c98:	681b      	ldr	r3, [r3, #0]
   b4c9a:	699b      	ldr	r3, [r3, #24]
   b4c9c:	9301      	str	r3, [sp, #4]
   b4c9e:	bd08      	pop	{r3, pc}
   b4ca0:	0003023c 	.word	0x0003023c

000b4ca4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4ca4:	b508      	push	{r3, lr}
   b4ca6:	4b02      	ldr	r3, [pc, #8]	; (b4cb0 <hal_usart_flush+0xc>)
   b4ca8:	681b      	ldr	r3, [r3, #0]
   b4caa:	69db      	ldr	r3, [r3, #28]
   b4cac:	9301      	str	r3, [sp, #4]
   b4cae:	bd08      	pop	{r3, pc}
   b4cb0:	0003023c 	.word	0x0003023c

000b4cb4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4cb4:	b508      	push	{r3, lr}
   b4cb6:	4b02      	ldr	r3, [pc, #8]	; (b4cc0 <hal_usart_available_data_for_write+0xc>)
   b4cb8:	681b      	ldr	r3, [r3, #0]
   b4cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4cbc:	9301      	str	r3, [sp, #4]
   b4cbe:	bd08      	pop	{r3, pc}
   b4cc0:	0003023c 	.word	0x0003023c

000b4cc4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4cc4:	b508      	push	{r3, lr}
   b4cc6:	4b02      	ldr	r3, [pc, #8]	; (b4cd0 <hal_usart_init_ex+0xc>)
   b4cc8:	681b      	ldr	r3, [r3, #0]
   b4cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ccc:	9301      	str	r3, [sp, #4]
   b4cce:	bd08      	pop	{r3, pc}
   b4cd0:	0003023c 	.word	0x0003023c

000b4cd4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4cd4:	b508      	push	{r3, lr}
   b4cd6:	4b02      	ldr	r3, [pc, #8]	; (b4ce0 <HAL_USB_USART_Init+0xc>)
   b4cd8:	681b      	ldr	r3, [r3, #0]
   b4cda:	681b      	ldr	r3, [r3, #0]
   b4cdc:	9301      	str	r3, [sp, #4]
   b4cde:	bd08      	pop	{r3, pc}
   b4ce0:	0003024c 	.word	0x0003024c

000b4ce4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4ce4:	b508      	push	{r3, lr}
   b4ce6:	4b02      	ldr	r3, [pc, #8]	; (b4cf0 <HAL_USB_USART_Available_Data+0xc>)
   b4ce8:	681b      	ldr	r3, [r3, #0]
   b4cea:	691b      	ldr	r3, [r3, #16]
   b4cec:	9301      	str	r3, [sp, #4]
   b4cee:	bd08      	pop	{r3, pc}
   b4cf0:	0003024c 	.word	0x0003024c

000b4cf4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4cf4:	b508      	push	{r3, lr}
   b4cf6:	4b02      	ldr	r3, [pc, #8]	; (b4d00 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4cf8:	681b      	ldr	r3, [r3, #0]
   b4cfa:	695b      	ldr	r3, [r3, #20]
   b4cfc:	9301      	str	r3, [sp, #4]
   b4cfe:	bd08      	pop	{r3, pc}
   b4d00:	0003024c 	.word	0x0003024c

000b4d04 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4d04:	b508      	push	{r3, lr}
   b4d06:	4b02      	ldr	r3, [pc, #8]	; (b4d10 <HAL_USB_USART_Receive_Data+0xc>)
   b4d08:	681b      	ldr	r3, [r3, #0]
   b4d0a:	699b      	ldr	r3, [r3, #24]
   b4d0c:	9301      	str	r3, [sp, #4]
   b4d0e:	bd08      	pop	{r3, pc}
   b4d10:	0003024c 	.word	0x0003024c

000b4d14 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4d14:	b508      	push	{r3, lr}
   b4d16:	4b02      	ldr	r3, [pc, #8]	; (b4d20 <HAL_USB_USART_Send_Data+0xc>)
   b4d18:	681b      	ldr	r3, [r3, #0]
   b4d1a:	69db      	ldr	r3, [r3, #28]
   b4d1c:	9301      	str	r3, [sp, #4]
   b4d1e:	bd08      	pop	{r3, pc}
   b4d20:	0003024c 	.word	0x0003024c

000b4d24 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4d24:	b508      	push	{r3, lr}
   b4d26:	4b02      	ldr	r3, [pc, #8]	; (b4d30 <HAL_USB_USART_Flush_Data+0xc>)
   b4d28:	681b      	ldr	r3, [r3, #0]
   b4d2a:	6a1b      	ldr	r3, [r3, #32]
   b4d2c:	9301      	str	r3, [sp, #4]
   b4d2e:	bd08      	pop	{r3, pc}
   b4d30:	0003024c 	.word	0x0003024c

000b4d34 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4d34:	b508      	push	{r3, lr}
   b4d36:	4b02      	ldr	r3, [pc, #8]	; (b4d40 <log_message+0xc>)
   b4d38:	681b      	ldr	r3, [r3, #0]
   b4d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4d3c:	9301      	str	r3, [sp, #4]
   b4d3e:	bd08      	pop	{r3, pc}
   b4d40:	00030260 	.word	0x00030260

000b4d44 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4d44:	b508      	push	{r3, lr}
   b4d46:	4b02      	ldr	r3, [pc, #8]	; (b4d50 <set_system_mode+0xc>)
   b4d48:	681b      	ldr	r3, [r3, #0]
   b4d4a:	685b      	ldr	r3, [r3, #4]
   b4d4c:	9301      	str	r3, [sp, #4]
   b4d4e:	bd08      	pop	{r3, pc}
   b4d50:	00030220 	.word	0x00030220

000b4d54 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4d54:	b508      	push	{r3, lr}
   b4d56:	4b02      	ldr	r3, [pc, #8]	; (b4d60 <system_delay_ms+0xc>)
   b4d58:	681b      	ldr	r3, [r3, #0]
   b4d5a:	695b      	ldr	r3, [r3, #20]
   b4d5c:	9301      	str	r3, [sp, #4]
   b4d5e:	bd08      	pop	{r3, pc}
   b4d60:	00030220 	.word	0x00030220

000b4d64 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4d64:	b508      	push	{r3, lr}
   b4d66:	4b02      	ldr	r3, [pc, #8]	; (b4d70 <system_thread_set_state+0xc>)
   b4d68:	681b      	ldr	r3, [r3, #0]
   b4d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d6c:	9301      	str	r3, [sp, #4]
   b4d6e:	bd08      	pop	{r3, pc}
   b4d70:	00030220 	.word	0x00030220

000b4d74 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4d74:	b508      	push	{r3, lr}
   b4d76:	4b03      	ldr	r3, [pc, #12]	; (b4d84 <system_ctrl_set_app_request_handler+0x10>)
   b4d78:	681b      	ldr	r3, [r3, #0]
   b4d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4d7e:	9301      	str	r3, [sp, #4]
   b4d80:	bd08      	pop	{r3, pc}
   b4d82:	0000      	.short	0x0000
   b4d84:	00030220 	.word	0x00030220

000b4d88 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4d88:	b508      	push	{r3, lr}
   b4d8a:	4b03      	ldr	r3, [pc, #12]	; (b4d98 <system_ctrl_set_result+0x10>)
   b4d8c:	681b      	ldr	r3, [r3, #0]
   b4d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4d92:	9301      	str	r3, [sp, #4]
   b4d94:	bd08      	pop	{r3, pc}
   b4d96:	0000      	.short	0x0000
   b4d98:	00030220 	.word	0x00030220

000b4d9c <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b4d9c:	b508      	push	{r3, lr}
   b4d9e:	4b02      	ldr	r3, [pc, #8]	; (b4da8 <spark_deviceID+0xc>)
   b4da0:	681b      	ldr	r3, [r3, #0]
   b4da2:	69db      	ldr	r3, [r3, #28]
   b4da4:	9301      	str	r3, [sp, #4]
   b4da6:	bd08      	pop	{r3, pc}
   b4da8:	00030244 	.word	0x00030244

000b4dac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4dac:	b508      	push	{r3, lr}
   b4dae:	4b02      	ldr	r3, [pc, #8]	; (b4db8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4db0:	681b      	ldr	r3, [r3, #0]
   b4db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4db4:	9301      	str	r3, [sp, #4]
   b4db6:	bd08      	pop	{r3, pc}
   b4db8:	00030244 	.word	0x00030244

000b4dbc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4dbc:	b508      	push	{r3, lr}
   b4dbe:	4b02      	ldr	r3, [pc, #8]	; (b4dc8 <network_connect+0xc>)
   b4dc0:	681b      	ldr	r3, [r3, #0]
   b4dc2:	685b      	ldr	r3, [r3, #4]
   b4dc4:	9301      	str	r3, [sp, #4]
   b4dc6:	bd08      	pop	{r3, pc}
   b4dc8:	00030240 	.word	0x00030240

000b4dcc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4dcc:	b508      	push	{r3, lr}
   b4dce:	4b02      	ldr	r3, [pc, #8]	; (b4dd8 <network_connecting+0xc>)
   b4dd0:	681b      	ldr	r3, [r3, #0]
   b4dd2:	689b      	ldr	r3, [r3, #8]
   b4dd4:	9301      	str	r3, [sp, #4]
   b4dd6:	bd08      	pop	{r3, pc}
   b4dd8:	00030240 	.word	0x00030240

000b4ddc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4ddc:	b508      	push	{r3, lr}
   b4dde:	4b02      	ldr	r3, [pc, #8]	; (b4de8 <network_disconnect+0xc>)
   b4de0:	681b      	ldr	r3, [r3, #0]
   b4de2:	68db      	ldr	r3, [r3, #12]
   b4de4:	9301      	str	r3, [sp, #4]
   b4de6:	bd08      	pop	{r3, pc}
   b4de8:	00030240 	.word	0x00030240

000b4dec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4dec:	b508      	push	{r3, lr}
   b4dee:	4b02      	ldr	r3, [pc, #8]	; (b4df8 <network_ready+0xc>)
   b4df0:	681b      	ldr	r3, [r3, #0]
   b4df2:	691b      	ldr	r3, [r3, #16]
   b4df4:	9301      	str	r3, [sp, #4]
   b4df6:	bd08      	pop	{r3, pc}
   b4df8:	00030240 	.word	0x00030240

000b4dfc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4dfc:	b508      	push	{r3, lr}
   b4dfe:	4b02      	ldr	r3, [pc, #8]	; (b4e08 <network_on+0xc>)
   b4e00:	681b      	ldr	r3, [r3, #0]
   b4e02:	695b      	ldr	r3, [r3, #20]
   b4e04:	9301      	str	r3, [sp, #4]
   b4e06:	bd08      	pop	{r3, pc}
   b4e08:	00030240 	.word	0x00030240

000b4e0c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4e0c:	b508      	push	{r3, lr}
   b4e0e:	4b02      	ldr	r3, [pc, #8]	; (b4e18 <network_off+0xc>)
   b4e10:	681b      	ldr	r3, [r3, #0]
   b4e12:	699b      	ldr	r3, [r3, #24]
   b4e14:	9301      	str	r3, [sp, #4]
   b4e16:	bd08      	pop	{r3, pc}
   b4e18:	00030240 	.word	0x00030240

000b4e1c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4e1c:	b508      	push	{r3, lr}
   b4e1e:	4b02      	ldr	r3, [pc, #8]	; (b4e28 <network_listen+0xc>)
   b4e20:	681b      	ldr	r3, [r3, #0]
   b4e22:	69db      	ldr	r3, [r3, #28]
   b4e24:	9301      	str	r3, [sp, #4]
   b4e26:	bd08      	pop	{r3, pc}
   b4e28:	00030240 	.word	0x00030240

000b4e2c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4e2c:	b508      	push	{r3, lr}
   b4e2e:	4b02      	ldr	r3, [pc, #8]	; (b4e38 <network_listening+0xc>)
   b4e30:	681b      	ldr	r3, [r3, #0]
   b4e32:	6a1b      	ldr	r3, [r3, #32]
   b4e34:	9301      	str	r3, [sp, #4]
   b4e36:	bd08      	pop	{r3, pc}
   b4e38:	00030240 	.word	0x00030240

000b4e3c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4e3c:	b508      	push	{r3, lr}
   b4e3e:	4b02      	ldr	r3, [pc, #8]	; (b4e48 <network_set_listen_timeout+0xc>)
   b4e40:	681b      	ldr	r3, [r3, #0]
   b4e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e44:	9301      	str	r3, [sp, #4]
   b4e46:	bd08      	pop	{r3, pc}
   b4e48:	00030240 	.word	0x00030240

000b4e4c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4e4c:	b508      	push	{r3, lr}
   b4e4e:	4b02      	ldr	r3, [pc, #8]	; (b4e58 <network_get_listen_timeout+0xc>)
   b4e50:	681b      	ldr	r3, [r3, #0]
   b4e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4e54:	9301      	str	r3, [sp, #4]
   b4e56:	bd08      	pop	{r3, pc}
   b4e58:	00030240 	.word	0x00030240

000b4e5c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4e5c:	b508      	push	{r3, lr}
   b4e5e:	4b02      	ldr	r3, [pc, #8]	; (b4e68 <network_is_on+0xc>)
   b4e60:	681b      	ldr	r3, [r3, #0]
   b4e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e64:	9301      	str	r3, [sp, #4]
   b4e66:	bd08      	pop	{r3, pc}
   b4e68:	00030240 	.word	0x00030240

000b4e6c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4e6c:	b508      	push	{r3, lr}
   b4e6e:	4b02      	ldr	r3, [pc, #8]	; (b4e78 <network_is_off+0xc>)
   b4e70:	681b      	ldr	r3, [r3, #0]
   b4e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4e74:	9301      	str	r3, [sp, #4]
   b4e76:	bd08      	pop	{r3, pc}
   b4e78:	00030240 	.word	0x00030240

000b4e7c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4e7c:	b508      	push	{r3, lr}
   b4e7e:	4b02      	ldr	r3, [pc, #8]	; (b4e88 <malloc+0xc>)
   b4e80:	681b      	ldr	r3, [r3, #0]
   b4e82:	681b      	ldr	r3, [r3, #0]
   b4e84:	9301      	str	r3, [sp, #4]
   b4e86:	bd08      	pop	{r3, pc}
   b4e88:	0003021c 	.word	0x0003021c

000b4e8c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4e8c:	b508      	push	{r3, lr}
   b4e8e:	4b02      	ldr	r3, [pc, #8]	; (b4e98 <free+0xc>)
   b4e90:	681b      	ldr	r3, [r3, #0]
   b4e92:	685b      	ldr	r3, [r3, #4]
   b4e94:	9301      	str	r3, [sp, #4]
   b4e96:	bd08      	pop	{r3, pc}
   b4e98:	0003021c 	.word	0x0003021c

000b4e9c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4e9c:	b508      	push	{r3, lr}
   b4e9e:	4b02      	ldr	r3, [pc, #8]	; (b4ea8 <realloc+0xc>)
   b4ea0:	681b      	ldr	r3, [r3, #0]
   b4ea2:	689b      	ldr	r3, [r3, #8]
   b4ea4:	9301      	str	r3, [sp, #4]
   b4ea6:	bd08      	pop	{r3, pc}
   b4ea8:	0003021c 	.word	0x0003021c

000b4eac <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4eac:	b508      	push	{r3, lr}
   b4eae:	4b02      	ldr	r3, [pc, #8]	; (b4eb8 <__errno+0xc>)
   b4eb0:	681b      	ldr	r3, [r3, #0]
   b4eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4eb4:	9301      	str	r3, [sp, #4]
   b4eb6:	bd08      	pop	{r3, pc}
   b4eb8:	0003021c 	.word	0x0003021c

000b4ebc <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4ebc:	b508      	push	{r3, lr}
   b4ebe:	4b02      	ldr	r3, [pc, #8]	; (b4ec8 <__assert_func+0xc>)
   b4ec0:	681b      	ldr	r3, [r3, #0]
   b4ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ec4:	9301      	str	r3, [sp, #4]
   b4ec6:	bd08      	pop	{r3, pc}
   b4ec8:	0003021c 	.word	0x0003021c

000b4ecc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4ecc:	b508      	push	{r3, lr}
   b4ece:	4b02      	ldr	r3, [pc, #8]	; (b4ed8 <newlib_impure_ptr_callback+0xc>)
   b4ed0:	681b      	ldr	r3, [r3, #0]
   b4ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4ed4:	9301      	str	r3, [sp, #4]
   b4ed6:	bd08      	pop	{r3, pc}
   b4ed8:	0003021c 	.word	0x0003021c

000b4edc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4edc:	2100      	movs	r1, #0
   b4ede:	f7ff bf39 	b.w	b4d54 <system_delay_ms>
	...

000b4ee4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4ee4:	4802      	ldr	r0, [pc, #8]	; (b4ef0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4ee6:	2300      	movs	r3, #0
   b4ee8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4eea:	f7ff be43 	b.w	b4b74 <os_mutex_recursive_create>
   b4eee:	bf00      	nop
   b4ef0:	2003e6dc 	.word	0x2003e6dc

000b4ef4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4ef4:	2200      	movs	r2, #0
   b4ef6:	6840      	ldr	r0, [r0, #4]
   b4ef8:	4611      	mov	r1, r2
   b4efa:	f7ff bf97 	b.w	b4e2c <network_listening>

000b4efe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4efe:	2200      	movs	r2, #0
   b4f00:	6840      	ldr	r0, [r0, #4]
   b4f02:	4611      	mov	r1, r2
   b4f04:	f7ff bfa2 	b.w	b4e4c <network_get_listen_timeout>

000b4f08 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4f08:	6840      	ldr	r0, [r0, #4]
   b4f0a:	2200      	movs	r2, #0
   b4f0c:	f7ff bf96 	b.w	b4e3c <network_set_listen_timeout>

000b4f10 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4f10:	6840      	ldr	r0, [r0, #4]
   b4f12:	2200      	movs	r2, #0
   b4f14:	f081 0101 	eor.w	r1, r1, #1
   b4f18:	f7ff bf80 	b.w	b4e1c <network_listen>

000b4f1c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4f1c:	2300      	movs	r3, #0
   b4f1e:	6840      	ldr	r0, [r0, #4]
   b4f20:	461a      	mov	r2, r3
   b4f22:	4619      	mov	r1, r3
   b4f24:	f7ff bf72 	b.w	b4e0c <network_off>

000b4f28 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4f28:	2300      	movs	r3, #0
   b4f2a:	6840      	ldr	r0, [r0, #4]
   b4f2c:	461a      	mov	r2, r3
   b4f2e:	4619      	mov	r1, r3
   b4f30:	f7ff bf64 	b.w	b4dfc <network_on>

000b4f34 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4f34:	2200      	movs	r2, #0
   b4f36:	6840      	ldr	r0, [r0, #4]
   b4f38:	4611      	mov	r1, r2
   b4f3a:	f7ff bf57 	b.w	b4dec <network_ready>

000b4f3e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4f3e:	2200      	movs	r2, #0
   b4f40:	6840      	ldr	r0, [r0, #4]
   b4f42:	4611      	mov	r1, r2
   b4f44:	f7ff bf42 	b.w	b4dcc <network_connecting>

000b4f48 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4f48:	6840      	ldr	r0, [r0, #4]
   b4f4a:	2200      	movs	r2, #0
   b4f4c:	2102      	movs	r1, #2
   b4f4e:	f7ff bf45 	b.w	b4ddc <network_disconnect>

000b4f52 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4f52:	2300      	movs	r3, #0
   b4f54:	6840      	ldr	r0, [r0, #4]
   b4f56:	461a      	mov	r2, r3
   b4f58:	f7ff bf30 	b.w	b4dbc <network_connect>

000b4f5c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4f5c:	4b02      	ldr	r3, [pc, #8]	; (b4f68 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4f5e:	2203      	movs	r2, #3
   b4f60:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4f62:	4a02      	ldr	r2, [pc, #8]	; (b4f6c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4f64:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4f66:	4770      	bx	lr
   b4f68:	2003e6e0 	.word	0x2003e6e0
   b4f6c:	000b6210 	.word	0x000b6210

000b4f70 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4f70:	4770      	bx	lr

000b4f72 <_ZN9IPAddressD0Ev>:
   b4f72:	b510      	push	{r4, lr}
   b4f74:	2118      	movs	r1, #24
   b4f76:	4604      	mov	r4, r0
   b4f78:	f7ff f891 	bl	b409e <_ZdlPvj>
   b4f7c:	4620      	mov	r0, r4
   b4f7e:	bd10      	pop	{r4, pc}

000b4f80 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4f80:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4f82:	7d03      	ldrb	r3, [r0, #20]
   b4f84:	2b06      	cmp	r3, #6
{
   b4f86:	b08d      	sub	sp, #52	; 0x34
   b4f88:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4f8a:	f100 0704 	add.w	r7, r0, #4
   b4f8e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4f92:	d012      	beq.n	b4fba <_ZNK9IPAddress7printToER5Print+0x3a>
   b4f94:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4f98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4f9c:	220a      	movs	r2, #10
   b4f9e:	4630      	mov	r0, r6
   b4fa0:	f000 f959 	bl	b5256 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4fa4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4fa6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4fa8:	d019      	beq.n	b4fde <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4faa:	2c00      	cmp	r4, #0
   b4fac:	d0f4      	beq.n	b4f98 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4fae:	212e      	movs	r1, #46	; 0x2e
   b4fb0:	4630      	mov	r0, r6
   b4fb2:	f000 f94d 	bl	b5250 <_ZN5Print5printEc>
   b4fb6:	4404      	add	r4, r0
   b4fb8:	e7ee      	b.n	b4f98 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4fba:	232f      	movs	r3, #47	; 0x2f
   b4fbc:	466a      	mov	r2, sp
   b4fbe:	4639      	mov	r1, r7
   b4fc0:	200a      	movs	r0, #10
		buf[0] = 0;
   b4fc2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4fc6:	f7ff fdf5 	bl	b4bb4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4fca:	4668      	mov	r0, sp
   b4fcc:	f001 f84c 	bl	b6068 <strlen>
   b4fd0:	6833      	ldr	r3, [r6, #0]
   b4fd2:	4602      	mov	r2, r0
   b4fd4:	68db      	ldr	r3, [r3, #12]
   b4fd6:	4669      	mov	r1, sp
   b4fd8:	4630      	mov	r0, r6
   b4fda:	4798      	blx	r3
   b4fdc:	4604      	mov	r4, r0
    }
    return n;
}
   b4fde:	4620      	mov	r0, r4
   b4fe0:	b00d      	add	sp, #52	; 0x34
   b4fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4fe4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4fe4:	b510      	push	{r4, lr}
   b4fe6:	4b05      	ldr	r3, [pc, #20]	; (b4ffc <_ZN9IPAddressC1Ev+0x18>)
   b4fe8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4fea:	2211      	movs	r2, #17
   b4fec:	f840 3b04 	str.w	r3, [r0], #4
   b4ff0:	2100      	movs	r1, #0
   b4ff2:	f000 fff9 	bl	b5fe8 <memset>
}
   b4ff6:	4620      	mov	r0, r4
   b4ff8:	bd10      	pop	{r4, pc}
   b4ffa:	bf00      	nop
   b4ffc:	000b624c 	.word	0x000b624c

000b5000 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5000:	4603      	mov	r3, r0
   b5002:	4a07      	ldr	r2, [pc, #28]	; (b5020 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5004:	b510      	push	{r4, lr}
   b5006:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b500a:	f101 0210 	add.w	r2, r1, #16
   b500e:	f851 4b04 	ldr.w	r4, [r1], #4
   b5012:	f843 4b04 	str.w	r4, [r3], #4
   b5016:	4291      	cmp	r1, r2
   b5018:	d1f9      	bne.n	b500e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b501a:	780a      	ldrb	r2, [r1, #0]
   b501c:	701a      	strb	r2, [r3, #0]
}
   b501e:	bd10      	pop	{r4, pc}
   b5020:	000b624c 	.word	0x000b624c

000b5024 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5024:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b5026:	2b04      	cmp	r3, #4
   b5028:	d104      	bne.n	b5034 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b502a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b502c:	3800      	subs	r0, #0
   b502e:	bf18      	it	ne
   b5030:	2001      	movne	r0, #1
   b5032:	4770      	bx	lr
    } else if (version() == 6) {
   b5034:	2b06      	cmp	r3, #6
   b5036:	d107      	bne.n	b5048 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5038:	6843      	ldr	r3, [r0, #4]
   b503a:	b93b      	cbnz	r3, b504c <_ZNK9IPAddresscvbEv+0x28>
   b503c:	6883      	ldr	r3, [r0, #8]
   b503e:	b92b      	cbnz	r3, b504c <_ZNK9IPAddresscvbEv+0x28>
   b5040:	68c3      	ldr	r3, [r0, #12]
   b5042:	b91b      	cbnz	r3, b504c <_ZNK9IPAddresscvbEv+0x28>
   b5044:	6900      	ldr	r0, [r0, #16]
   b5046:	e7f1      	b.n	b502c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b5048:	2000      	movs	r0, #0
   b504a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b504c:	2001      	movs	r0, #1
}
   b504e:	4770      	bx	lr

000b5050 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5050:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5052:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5056:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b505a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b505e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5062:	2304      	movs	r3, #4
   b5064:	6041      	str	r1, [r0, #4]
   b5066:	7503      	strb	r3, [r0, #20]
}
   b5068:	bd10      	pop	{r4, pc}
	...

000b506c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b506c:	b507      	push	{r0, r1, r2, lr}
   b506e:	4b06      	ldr	r3, [pc, #24]	; (b5088 <_ZN9IPAddressC1EPKh+0x1c>)
   b5070:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5072:	78cb      	ldrb	r3, [r1, #3]
   b5074:	9300      	str	r3, [sp, #0]
   b5076:	788b      	ldrb	r3, [r1, #2]
   b5078:	784a      	ldrb	r2, [r1, #1]
   b507a:	7809      	ldrb	r1, [r1, #0]
   b507c:	f7ff ffe8 	bl	b5050 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5080:	b003      	add	sp, #12
   b5082:	f85d fb04 	ldr.w	pc, [sp], #4
   b5086:	bf00      	nop
   b5088:	000b624c 	.word	0x000b624c

000b508c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b508c:	4b01      	ldr	r3, [pc, #4]	; (b5094 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b508e:	4a02      	ldr	r2, [pc, #8]	; (b5098 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5090:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5092:	4770      	bx	lr
   b5094:	2003e6e8 	.word	0x2003e6e8
   b5098:	000b6258 	.word	0x000b6258

000b509c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b509c:	2300      	movs	r3, #0
   b509e:	6840      	ldr	r0, [r0, #4]
   b50a0:	461a      	mov	r2, r3
   b50a2:	f7ff be8b 	b.w	b4dbc <network_connect>

000b50a6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b50a6:	6840      	ldr	r0, [r0, #4]
   b50a8:	2200      	movs	r2, #0
   b50aa:	2102      	movs	r1, #2
   b50ac:	f7ff be96 	b.w	b4ddc <network_disconnect>

000b50b0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b50b0:	2200      	movs	r2, #0
   b50b2:	6840      	ldr	r0, [r0, #4]
   b50b4:	4611      	mov	r1, r2
   b50b6:	f7ff be89 	b.w	b4dcc <network_connecting>

000b50ba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b50ba:	2200      	movs	r2, #0
   b50bc:	6840      	ldr	r0, [r0, #4]
   b50be:	4611      	mov	r1, r2
   b50c0:	f7ff be94 	b.w	b4dec <network_ready>

000b50c4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b50c4:	2300      	movs	r3, #0
   b50c6:	6840      	ldr	r0, [r0, #4]
   b50c8:	461a      	mov	r2, r3
   b50ca:	4619      	mov	r1, r3
   b50cc:	f7ff be96 	b.w	b4dfc <network_on>

000b50d0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b50d0:	2300      	movs	r3, #0
   b50d2:	6840      	ldr	r0, [r0, #4]
   b50d4:	461a      	mov	r2, r3
   b50d6:	4619      	mov	r1, r3
   b50d8:	f7ff be98 	b.w	b4e0c <network_off>

000b50dc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b50dc:	6840      	ldr	r0, [r0, #4]
   b50de:	2100      	movs	r1, #0
   b50e0:	f7ff bebc 	b.w	b4e5c <network_is_on>

000b50e4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b50e4:	6840      	ldr	r0, [r0, #4]
   b50e6:	2100      	movs	r1, #0
   b50e8:	f7ff bec0 	b.w	b4e6c <network_is_off>

000b50ec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b50ec:	6840      	ldr	r0, [r0, #4]
   b50ee:	2200      	movs	r2, #0
   b50f0:	f081 0101 	eor.w	r1, r1, #1
   b50f4:	f7ff be92 	b.w	b4e1c <network_listen>

000b50f8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b50f8:	6840      	ldr	r0, [r0, #4]
   b50fa:	2200      	movs	r2, #0
   b50fc:	f7ff be9e 	b.w	b4e3c <network_set_listen_timeout>

000b5100 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5100:	2200      	movs	r2, #0
   b5102:	6840      	ldr	r0, [r0, #4]
   b5104:	4611      	mov	r1, r2
   b5106:	f7ff bea1 	b.w	b4e4c <network_get_listen_timeout>

000b510a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b510a:	2200      	movs	r2, #0
   b510c:	6840      	ldr	r0, [r0, #4]
   b510e:	4611      	mov	r1, r2
   b5110:	f7ff be8c 	b.w	b4e2c <network_listening>

000b5114 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5118:	b095      	sub	sp, #84	; 0x54
   b511a:	4614      	mov	r4, r2
   b511c:	460d      	mov	r5, r1
   b511e:	4607      	mov	r7, r0
    IPAddress addr;
   b5120:	f7ff ff60 	bl	b4fe4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5124:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5126:	221c      	movs	r2, #28
   b5128:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b512a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b512c:	f000 ff5c 	bl	b5fe8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5130:	2340      	movs	r3, #64	; 0x40
   b5132:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5134:	4620      	mov	r0, r4
   b5136:	466b      	mov	r3, sp
   b5138:	aa0c      	add	r2, sp, #48	; 0x30
   b513a:	2100      	movs	r1, #0
   b513c:	f7ff fd5a 	bl	b4bf4 <netdb_getaddrinfo>
    if (!r) {
   b5140:	4604      	mov	r4, r0
   b5142:	2800      	cmp	r0, #0
   b5144:	d14b      	bne.n	b51de <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5146:	4602      	mov	r2, r0
   b5148:	2101      	movs	r1, #1
   b514a:	6868      	ldr	r0, [r5, #4]
   b514c:	f7ff fe4e 	bl	b4dec <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5150:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5152:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5154:	4622      	mov	r2, r4
   b5156:	6868      	ldr	r0, [r5, #4]
   b5158:	f7ff fe48 	bl	b4dec <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b515c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b515e:	4681      	mov	r9, r0
        bool ok = false;
   b5160:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5162:	2e00      	cmp	r6, #0
   b5164:	d03b      	beq.n	b51de <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5166:	2900      	cmp	r1, #0
   b5168:	d139      	bne.n	b51de <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b516a:	6873      	ldr	r3, [r6, #4]
   b516c:	2b02      	cmp	r3, #2
   b516e:	d003      	beq.n	b5178 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5170:	2b0a      	cmp	r3, #10
   b5172:	d011      	beq.n	b5198 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5174:	69f6      	ldr	r6, [r6, #28]
   b5176:	e7f4      	b.n	b5162 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5178:	f1b8 0f00 	cmp.w	r8, #0
   b517c:	d0fa      	beq.n	b5174 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b517e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5180:	a806      	add	r0, sp, #24
   b5182:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5184:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5186:	f7ff ff71 	bl	b506c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b518a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b518c:	1d3c      	adds	r4, r7, #4
   b518e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5190:	682b      	ldr	r3, [r5, #0]
   b5192:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5194:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5196:	e7ed      	b.n	b5174 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5198:	f1b9 0f00 	cmp.w	r9, #0
   b519c:	d0ea      	beq.n	b5174 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b519e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b51a0:	2210      	movs	r2, #16
   b51a2:	a801      	add	r0, sp, #4
   b51a4:	f000 ff20 	bl	b5fe8 <memset>
                    a.v = 6;
   b51a8:	2306      	movs	r3, #6
   b51aa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b51ae:	ad01      	add	r5, sp, #4
   b51b0:	f104 0308 	add.w	r3, r4, #8
   b51b4:	3418      	adds	r4, #24
   b51b6:	6818      	ldr	r0, [r3, #0]
   b51b8:	6859      	ldr	r1, [r3, #4]
   b51ba:	462a      	mov	r2, r5
   b51bc:	c203      	stmia	r2!, {r0, r1}
   b51be:	3308      	adds	r3, #8
   b51c0:	42a3      	cmp	r3, r4
   b51c2:	4615      	mov	r5, r2
   b51c4:	d1f7      	bne.n	b51b6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b51c6:	a901      	add	r1, sp, #4
   b51c8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b51ca:	ad07      	add	r5, sp, #28
   b51cc:	f7ff ff18 	bl	b5000 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b51d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b51d2:	1d3c      	adds	r4, r7, #4
   b51d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b51d6:	682b      	ldr	r3, [r5, #0]
   b51d8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b51da:	4649      	mov	r1, r9
   b51dc:	e7ca      	b.n	b5174 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b51de:	9800      	ldr	r0, [sp, #0]
   b51e0:	f7ff fd00 	bl	b4be4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b51e4:	4638      	mov	r0, r7
   b51e6:	b015      	add	sp, #84	; 0x54
   b51e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b51ec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b51ec:	4b02      	ldr	r3, [pc, #8]	; (b51f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b51ee:	4a03      	ldr	r2, [pc, #12]	; (b51fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b51f0:	601a      	str	r2, [r3, #0]
   b51f2:	2200      	movs	r2, #0
   b51f4:	605a      	str	r2, [r3, #4]

} // spark
   b51f6:	4770      	bx	lr
   b51f8:	2003e6ec 	.word	0x2003e6ec
   b51fc:	000b6264 	.word	0x000b6264

000b5200 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5202:	4606      	mov	r6, r0
   b5204:	460d      	mov	r5, r1
  size_t n = 0;
   b5206:	188f      	adds	r7, r1, r2
   b5208:	2400      	movs	r4, #0
  while (size--) {
   b520a:	42bd      	cmp	r5, r7
   b520c:	d00c      	beq.n	b5228 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b520e:	6833      	ldr	r3, [r6, #0]
   b5210:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5214:	689b      	ldr	r3, [r3, #8]
   b5216:	4630      	mov	r0, r6
   b5218:	4798      	blx	r3
     if (chunk>=0)
   b521a:	1e03      	subs	r3, r0, #0
   b521c:	db01      	blt.n	b5222 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b521e:	441c      	add	r4, r3
  while (size--) {
   b5220:	e7f3      	b.n	b520a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5222:	2c00      	cmp	r4, #0
   b5224:	bf08      	it	eq
   b5226:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5228:	4620      	mov	r0, r4
   b522a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b522c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b522c:	b513      	push	{r0, r1, r4, lr}
   b522e:	4604      	mov	r4, r0
    }
   b5230:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5232:	b159      	cbz	r1, b524c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5234:	9101      	str	r1, [sp, #4]
   b5236:	f000 ff17 	bl	b6068 <strlen>
   b523a:	6823      	ldr	r3, [r4, #0]
   b523c:	9901      	ldr	r1, [sp, #4]
   b523e:	68db      	ldr	r3, [r3, #12]
   b5240:	4602      	mov	r2, r0
   b5242:	4620      	mov	r0, r4
    }
   b5244:	b002      	add	sp, #8
   b5246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b524a:	4718      	bx	r3
    }
   b524c:	b002      	add	sp, #8
   b524e:	bd10      	pop	{r4, pc}

000b5250 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5250:	6803      	ldr	r3, [r0, #0]
   b5252:	689b      	ldr	r3, [r3, #8]
   b5254:	4718      	bx	r3

000b5256 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5256:	b530      	push	{r4, r5, lr}
   b5258:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b525a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b525c:	2a01      	cmp	r2, #1
  *str = '\0';
   b525e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5262:	bf98      	it	ls
   b5264:	220a      	movls	r2, #10
   b5266:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5268:	460d      	mov	r5, r1
   b526a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b526e:	fb01 5312 	mls	r3, r1, r2, r5
   b5272:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5276:	2b09      	cmp	r3, #9
   b5278:	bf94      	ite	ls
   b527a:	3330      	addls	r3, #48	; 0x30
   b527c:	3337      	addhi	r3, #55	; 0x37
   b527e:	b2db      	uxtb	r3, r3
  } while(n);
   b5280:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5282:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5286:	d9ef      	bls.n	b5268 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5288:	4621      	mov	r1, r4
   b528a:	f7ff ffcf 	bl	b522c <_ZN5Print5writeEPKc>
}
   b528e:	b00b      	add	sp, #44	; 0x2c
   b5290:	bd30      	pop	{r4, r5, pc}
	...

000b5294 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5294:	4b01      	ldr	r3, [pc, #4]	; (b529c <_GLOBAL__sub_I_RGB+0x8>)
   b5296:	2200      	movs	r2, #0
   b5298:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b529a:	4770      	bx	lr
   b529c:	2003e6f4 	.word	0x2003e6f4

000b52a0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b52a0:	b510      	push	{r4, lr}
   b52a2:	4604      	mov	r4, r0
{
	free(buffer);
   b52a4:	6800      	ldr	r0, [r0, #0]
   b52a6:	f7ff fdf1 	bl	b4e8c <free>
}
   b52aa:	4620      	mov	r0, r4
   b52ac:	bd10      	pop	{r4, pc}

000b52ae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b52ae:	b510      	push	{r4, lr}
   b52b0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b52b2:	6800      	ldr	r0, [r0, #0]
   b52b4:	b108      	cbz	r0, b52ba <_ZN6String10invalidateEv+0xc>
   b52b6:	f7ff fde9 	bl	b4e8c <free>
	buffer = NULL;
   b52ba:	2300      	movs	r3, #0
	capacity = len = 0;
   b52bc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b52c0:	6023      	str	r3, [r4, #0]
}
   b52c2:	bd10      	pop	{r4, pc}

000b52c4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b52c4:	b538      	push	{r3, r4, r5, lr}
   b52c6:	4604      	mov	r4, r0
   b52c8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b52ca:	6800      	ldr	r0, [r0, #0]
   b52cc:	3101      	adds	r1, #1
   b52ce:	f7ff fde5 	bl	b4e9c <realloc>
	if (newbuffer) {
   b52d2:	b110      	cbz	r0, b52da <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b52d4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b52d8:	2001      	movs	r0, #1
	}
	return 0;
}
   b52da:	bd38      	pop	{r3, r4, r5, pc}

000b52dc <_ZN6String7reserveEj>:
{
   b52dc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b52de:	6803      	ldr	r3, [r0, #0]
{
   b52e0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b52e2:	b123      	cbz	r3, b52ee <_ZN6String7reserveEj+0x12>
   b52e4:	6843      	ldr	r3, [r0, #4]
   b52e6:	428b      	cmp	r3, r1
   b52e8:	d301      	bcc.n	b52ee <_ZN6String7reserveEj+0x12>
   b52ea:	2001      	movs	r0, #1
}
   b52ec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b52ee:	4620      	mov	r0, r4
   b52f0:	f7ff ffe8 	bl	b52c4 <_ZN6String12changeBufferEj>
   b52f4:	2800      	cmp	r0, #0
   b52f6:	d0f9      	beq.n	b52ec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b52f8:	68a3      	ldr	r3, [r4, #8]
   b52fa:	2b00      	cmp	r3, #0
   b52fc:	d1f5      	bne.n	b52ea <_ZN6String7reserveEj+0xe>
   b52fe:	6822      	ldr	r2, [r4, #0]
   b5300:	7013      	strb	r3, [r2, #0]
   b5302:	e7f2      	b.n	b52ea <_ZN6String7reserveEj+0xe>

000b5304 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5304:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5306:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5308:	4611      	mov	r1, r2
   b530a:	9201      	str	r2, [sp, #4]
{
   b530c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b530e:	f7ff ffe5 	bl	b52dc <_ZN6String7reserveEj>
   b5312:	9a01      	ldr	r2, [sp, #4]
   b5314:	b928      	cbnz	r0, b5322 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5316:	4620      	mov	r0, r4
   b5318:	f7ff ffc9 	bl	b52ae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b531c:	4620      	mov	r0, r4
   b531e:	b003      	add	sp, #12
   b5320:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5322:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5324:	4629      	mov	r1, r5
   b5326:	6820      	ldr	r0, [r4, #0]
   b5328:	f000 fe50 	bl	b5fcc <memcpy>
	buffer[len] = 0;
   b532c:	6822      	ldr	r2, [r4, #0]
   b532e:	68a3      	ldr	r3, [r4, #8]
   b5330:	2100      	movs	r1, #0
   b5332:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5334:	e7f2      	b.n	b531c <_ZN6String4copyEPKcj+0x18>

000b5336 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5336:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5338:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b533a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b533e:	4604      	mov	r4, r0
	len = 0;
   b5340:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5342:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5344:	b141      	cbz	r1, b5358 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5346:	4608      	mov	r0, r1
   b5348:	9101      	str	r1, [sp, #4]
   b534a:	f000 fe8d 	bl	b6068 <strlen>
   b534e:	9901      	ldr	r1, [sp, #4]
   b5350:	4602      	mov	r2, r0
   b5352:	4620      	mov	r0, r4
   b5354:	f7ff ffd6 	bl	b5304 <_ZN6String4copyEPKcj>
}
   b5358:	4620      	mov	r0, r4
   b535a:	b002      	add	sp, #8
   b535c:	bd10      	pop	{r4, pc}

000b535e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b535e:	b513      	push	{r0, r1, r4, lr}
   b5360:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5362:	b159      	cbz	r1, b537c <_ZN6StringaSEPKc+0x1e>
   b5364:	4608      	mov	r0, r1
   b5366:	9101      	str	r1, [sp, #4]
   b5368:	f000 fe7e 	bl	b6068 <strlen>
   b536c:	9901      	ldr	r1, [sp, #4]
   b536e:	4602      	mov	r2, r0
   b5370:	4620      	mov	r0, r4
   b5372:	f7ff ffc7 	bl	b5304 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5376:	4620      	mov	r0, r4
   b5378:	b002      	add	sp, #8
   b537a:	bd10      	pop	{r4, pc}
	else invalidate();
   b537c:	f7ff ff97 	bl	b52ae <_ZN6String10invalidateEv>
   b5380:	e7f9      	b.n	b5376 <_ZN6StringaSEPKc+0x18>

000b5382 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b5382:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b5384:	6882      	ldr	r2, [r0, #8]
   b5386:	b93a      	cbnz	r2, b5398 <_ZNK6String6equalsEPKc+0x16>
   b5388:	b121      	cbz	r1, b5394 <_ZNK6String6equalsEPKc+0x12>
   b538a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b538c:	fab0 f080 	clz	r0, r0
   b5390:	0940      	lsrs	r0, r0, #5
   b5392:	e000      	b.n	b5396 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b5394:	2001      	movs	r0, #1
}
   b5396:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b5398:	6800      	ldr	r0, [r0, #0]
   b539a:	b909      	cbnz	r1, b53a0 <_ZNK6String6equalsEPKc+0x1e>
   b539c:	7800      	ldrb	r0, [r0, #0]
   b539e:	e7f5      	b.n	b538c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b53a0:	f000 fe58 	bl	b6054 <strcmp>
   b53a4:	e7f2      	b.n	b538c <_ZNK6String6equalsEPKc+0xa>
	...

000b53a8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b53a8:	4b05      	ldr	r3, [pc, #20]	; (b53c0 <_GLOBAL__sub_I_System+0x18>)
   b53aa:	2202      	movs	r2, #2
   b53ac:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b53ae:	4b05      	ldr	r3, [pc, #20]	; (b53c4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b53b0:	4a05      	ldr	r2, [pc, #20]	; (b53c8 <_GLOBAL__sub_I_System+0x20>)
   b53b2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b53b4:	2000      	movs	r0, #0
   b53b6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b53ba:	f7ff bcc3 	b.w	b4d44 <set_system_mode>
   b53be:	bf00      	nop
   b53c0:	2003e710 	.word	0x2003e710
   b53c4:	2003e704 	.word	0x2003e704
   b53c8:	ffff0000 	.word	0xffff0000

000b53cc <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b53cc:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b53ce:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b53d0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b53d4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b53d6:	2201      	movs	r2, #1
   b53d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b53dc:	f10d 0107 	add.w	r1, sp, #7
   b53e0:	47a0      	blx	r4
}
   b53e2:	b002      	add	sp, #8
   b53e4:	bd10      	pop	{r4, pc}

000b53e6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b53e6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b53e8:	6803      	ldr	r3, [r0, #0]
   b53ea:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b53ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b53f0:	46a4      	mov	ip, r4
}
   b53f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b53f6:	4760      	bx	ip

000b53f8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b53f8:	b513      	push	{r0, r1, r4, lr}
   b53fa:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b53fc:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b53fe:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b5402:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5404:	f10d 0107 	add.w	r1, sp, #7
   b5408:	2201      	movs	r2, #1
   b540a:	47a0      	blx	r4
}
   b540c:	b002      	add	sp, #8
   b540e:	bd10      	pop	{r4, pc}

000b5410 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b5410:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5412:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5414:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5418:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b541c:	429a      	cmp	r2, r3
int TCPClient::read() {
   b541e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5420:	d008      	beq.n	b5434 <_ZN9TCPClient4readEv+0x24>
   b5422:	6963      	ldr	r3, [r4, #20]
   b5424:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5428:	1c51      	adds	r1, r2, #1
   b542a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b542e:	4413      	add	r3, r2
   b5430:	7918      	ldrb	r0, [r3, #4]
}
   b5432:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5434:	6803      	ldr	r3, [r0, #0]
   b5436:	691b      	ldr	r3, [r3, #16]
   b5438:	4798      	blx	r3
   b543a:	2800      	cmp	r0, #0
   b543c:	d1f1      	bne.n	b5422 <_ZN9TCPClient4readEv+0x12>
   b543e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5442:	e7f6      	b.n	b5432 <_ZN9TCPClient4readEv+0x22>

000b5444 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5444:	4770      	bx	lr

000b5446 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b5446:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5448:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b544a:	43c0      	mvns	r0, r0
   b544c:	0fc0      	lsrs	r0, r0, #31
   b544e:	4770      	bx	lr

000b5450 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5450:	4770      	bx	lr
	...

000b5454 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5454:	4b06      	ldr	r3, [pc, #24]	; (b5470 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5456:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5458:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b545a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b545e:	d005      	beq.n	b546c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5460:	4608      	mov	r0, r1
   b5462:	f000 fc9b 	bl	b5d9c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5466:	2800      	cmp	r0, #0
   b5468:	bf08      	it	eq
   b546a:	2400      	moveq	r4, #0
      }
   b546c:	4620      	mov	r0, r4
   b546e:	bd10      	pop	{r4, pc}
   b5470:	000b6200 	.word	0x000b6200

000b5474 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5474:	b510      	push	{r4, lr}
   b5476:	21ac      	movs	r1, #172	; 0xac
   b5478:	4604      	mov	r4, r0
   b547a:	f7fe fe10 	bl	b409e <_ZdlPvj>
   b547e:	4620      	mov	r0, r4
   b5480:	bd10      	pop	{r4, pc}

000b5482 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5482:	21ac      	movs	r1, #172	; 0xac
   b5484:	f7fe be0b 	b.w	b409e <_ZdlPvj>

000b5488 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b548c:	f04f 0800 	mov.w	r8, #0
   b5490:	b086      	sub	sp, #24
   b5492:	461c      	mov	r4, r3
   b5494:	f8c0 8004 	str.w	r8, [r0, #4]
   b5498:	4605      	mov	r5, r0
   b549a:	460e      	mov	r6, r1
   b549c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b549e:	4641      	mov	r1, r8
   b54a0:	2210      	movs	r2, #16
   b54a2:	a802      	add	r0, sp, #8
   b54a4:	f000 fda0 	bl	b5fe8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b54a8:	1c63      	adds	r3, r4, #1
   b54aa:	d009      	beq.n	b54c0 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b54ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b54b0:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b54b4:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b54b8:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b54bc:	435c      	muls	r4, r3
   b54be:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b54c0:	6968      	ldr	r0, [r5, #20]
   b54c2:	2310      	movs	r3, #16
   b54c4:	9300      	str	r3, [sp, #0]
   b54c6:	6800      	ldr	r0, [r0, #0]
   b54c8:	ab02      	add	r3, sp, #8
   b54ca:	f241 0205 	movw	r2, #4101	; 0x1005
   b54ce:	f640 71ff 	movw	r1, #4095	; 0xfff
   b54d2:	f7ff fb97 	bl	b4c04 <sock_setsockopt>
    if (ret < 0) {
   b54d6:	2800      	cmp	r0, #0
   b54d8:	da07      	bge.n	b54ea <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b54da:	f7ff fce7 	bl	b4eac <__errno>
   b54de:	6803      	ldr	r3, [r0, #0]
   b54e0:	606b      	str	r3, [r5, #4]
        return 0;
   b54e2:	2000      	movs	r0, #0
}
   b54e4:	b006      	add	sp, #24
   b54e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b54ea:	6968      	ldr	r0, [r5, #20]
   b54ec:	2300      	movs	r3, #0
   b54ee:	6800      	ldr	r0, [r0, #0]
   b54f0:	463a      	mov	r2, r7
   b54f2:	4631      	mov	r1, r6
   b54f4:	f7ff fba6 	bl	b4c44 <sock_send>
    if (ret < 0) {
   b54f8:	1e03      	subs	r3, r0, #0
   b54fa:	dbee      	blt.n	b54da <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b54fc:	4618      	mov	r0, r3
   b54fe:	e7f1      	b.n	b54e4 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5500 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5500:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b5502:	6984      	ldr	r4, [r0, #24]
   b5504:	4b0a      	ldr	r3, [pc, #40]	; (b5530 <_ZN9TCPClientD1Ev+0x30>)
   b5506:	6003      	str	r3, [r0, #0]
   b5508:	4605      	mov	r5, r0
   b550a:	b17c      	cbz	r4, b552c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b550c:	6863      	ldr	r3, [r4, #4]
   b550e:	3b01      	subs	r3, #1
   b5510:	6063      	str	r3, [r4, #4]
   b5512:	b95b      	cbnz	r3, b552c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b5514:	6823      	ldr	r3, [r4, #0]
   b5516:	4620      	mov	r0, r4
   b5518:	689b      	ldr	r3, [r3, #8]
   b551a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b551c:	68a3      	ldr	r3, [r4, #8]
   b551e:	3b01      	subs	r3, #1
   b5520:	60a3      	str	r3, [r4, #8]
   b5522:	b91b      	cbnz	r3, b552c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b5524:	6823      	ldr	r3, [r4, #0]
   b5526:	4620      	mov	r0, r4
   b5528:	68db      	ldr	r3, [r3, #12]
   b552a:	4798      	blx	r3
   b552c:	4628      	mov	r0, r5
   b552e:	bd38      	pop	{r3, r4, r5, pc}
   b5530:	000b62d4 	.word	0x000b62d4

000b5534 <_ZN9TCPClientD0Ev>:
   b5534:	b510      	push	{r4, lr}
   b5536:	4604      	mov	r4, r0
   b5538:	f7ff ffe2 	bl	b5500 <_ZN9TCPClientD1Ev>
   b553c:	4620      	mov	r0, r4
   b553e:	211c      	movs	r1, #28
   b5540:	f7fe fdad 	bl	b409e <_ZdlPvj>
   b5544:	4620      	mov	r0, r4
   b5546:	bd10      	pop	{r4, pc}

000b5548 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5548:	b530      	push	{r4, r5, lr}
   b554a:	b087      	sub	sp, #28
   b554c:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b554e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5550:	4668      	mov	r0, sp
   b5552:	f7ff fd8b 	bl	b506c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5558:	3404      	adds	r4, #4
   b555a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b555c:	682b      	ldr	r3, [r5, #0]
   b555e:	7023      	strb	r3, [r4, #0]
    }
   b5560:	b007      	add	sp, #28
   b5562:	bd30      	pop	{r4, r5, pc}

000b5564 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b5564:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b5566:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b5568:	4b05      	ldr	r3, [pc, #20]	; (b5580 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b556a:	4604      	mov	r4, r0
   b556c:	358c      	adds	r5, #140	; 0x8c
   b556e:	f844 3b04 	str.w	r3, [r4], #4
   b5572:	4606      	mov	r6, r0
   b5574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5578:	682b      	ldr	r3, [r5, #0]
   b557a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b557c:	4630      	mov	r0, r6
   b557e:	bd70      	pop	{r4, r5, r6, pc}
   b5580:	000b624c 	.word	0x000b624c

000b5584 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5588:	4698      	mov	r8, r3
    stop();
   b558a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b558c:	b093      	sub	sp, #76	; 0x4c
   b558e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5590:	2400      	movs	r4, #0
    stop();
   b5592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5594:	4606      	mov	r6, r0
   b5596:	4617      	mov	r7, r2
    stop();
   b5598:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b559a:	4628      	mov	r0, r5
   b559c:	466b      	mov	r3, sp
   b559e:	4622      	mov	r2, r4
   b55a0:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b55a2:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b55a4:	f7ff fb26 	bl	b4bf4 <netdb_getaddrinfo>
   b55a8:	4605      	mov	r5, r0
   b55aa:	2800      	cmp	r0, #0
   b55ac:	d163      	bne.n	b5676 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b55ae:	9b00      	ldr	r3, [sp, #0]
   b55b0:	2b00      	cmp	r3, #0
   b55b2:	d04b      	beq.n	b564c <_ZN9TCPClient7connectEPKctm+0xc8>
   b55b4:	695b      	ldr	r3, [r3, #20]
   b55b6:	2b00      	cmp	r3, #0
   b55b8:	d048      	beq.n	b564c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b55ba:	a806      	add	r0, sp, #24
   b55bc:	f7ff fd12 	bl	b4fe4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b55c0:	9b00      	ldr	r3, [sp, #0]
   b55c2:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b55c4:	7863      	ldrb	r3, [r4, #1]
   b55c6:	2b02      	cmp	r3, #2
   b55c8:	d104      	bne.n	b55d4 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b55ca:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b55cc:	a806      	add	r0, sp, #24
   b55ce:	f7ff ffbb 	bl	b5548 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b55d2:	e026      	b.n	b5622 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b55d4:	2b0a      	cmp	r3, #10
   b55d6:	d124      	bne.n	b5622 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b55d8:	2211      	movs	r2, #17
   b55da:	4629      	mov	r1, r5
   b55dc:	a801      	add	r0, sp, #4
   b55de:	f000 fd03 	bl	b5fe8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b55e2:	68a3      	ldr	r3, [r4, #8]
   b55e4:	2b00      	cmp	r3, #0
   b55e6:	d038      	beq.n	b565a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b55e8:	f104 0308 	add.w	r3, r4, #8
   b55ec:	f10d 0c04 	add.w	ip, sp, #4
   b55f0:	3418      	adds	r4, #24
   b55f2:	6818      	ldr	r0, [r3, #0]
   b55f4:	6859      	ldr	r1, [r3, #4]
   b55f6:	4662      	mov	r2, ip
   b55f8:	c203      	stmia	r2!, {r0, r1}
   b55fa:	3308      	adds	r3, #8
   b55fc:	42a3      	cmp	r3, r4
   b55fe:	4694      	mov	ip, r2
   b5600:	d1f7      	bne.n	b55f2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b5602:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5604:	a901      	add	r1, sp, #4
   b5606:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5608:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b560c:	f7ff fcf8 	bl	b5000 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5610:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5614:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5618:	ac07      	add	r4, sp, #28
   b561a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b561c:	f8dc 3000 	ldr.w	r3, [ip]
   b5620:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5622:	a806      	add	r0, sp, #24
   b5624:	f7ff fcfe 	bl	b5024 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5628:	b180      	cbz	r0, b564c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b562a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b562c:	ad07      	add	r5, sp, #28
   b562e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b5632:	4b12      	ldr	r3, [pc, #72]	; (b567c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b5634:	930c      	str	r3, [sp, #48]	; 0x30
   b5636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5638:	ac0d      	add	r4, sp, #52	; 0x34
   b563a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b563c:	682b      	ldr	r3, [r5, #0]
   b563e:	7023      	strb	r3, [r4, #0]
   b5640:	463a      	mov	r2, r7
   b5642:	4643      	mov	r3, r8
   b5644:	a90c      	add	r1, sp, #48	; 0x30
   b5646:	4630      	mov	r0, r6
   b5648:	47c8      	blx	r9
   b564a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b564c:	9800      	ldr	r0, [sp, #0]
   b564e:	f7ff fac9 	bl	b4be4 <netdb_freeaddrinfo>
}
   b5652:	4628      	mov	r0, r5
   b5654:	b013      	add	sp, #76	; 0x4c
   b5656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b565a:	68e3      	ldr	r3, [r4, #12]
   b565c:	2b00      	cmp	r3, #0
   b565e:	d1c3      	bne.n	b55e8 <_ZN9TCPClient7connectEPKctm+0x64>
   b5660:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5664:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b5668:	f7ff faac 	bl	b4bc4 <inet_htonl>
   b566c:	4581      	cmp	r9, r0
   b566e:	d1bb      	bne.n	b55e8 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5670:	f104 0114 	add.w	r1, r4, #20
   b5674:	e7aa      	b.n	b55cc <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5676:	4625      	mov	r5, r4
   b5678:	e7e8      	b.n	b564c <_ZN9TCPClient7connectEPKctm+0xc8>
   b567a:	bf00      	nop
   b567c:	000b624c 	.word	0x000b624c

000b5680 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5680:	b538      	push	{r3, r4, r5, lr}
   b5682:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5684:	681a      	ldr	r2, [r3, #0]
   b5686:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5688:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b568a:	da10      	bge.n	b56ae <_ZN9TCPClient9connectedEv+0x2e>
   b568c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5690:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5694:	429a      	cmp	r2, r3
   b5696:	d10a      	bne.n	b56ae <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5698:	6803      	ldr	r3, [r0, #0]
   b569a:	691b      	ldr	r3, [r3, #16]
   b569c:	4798      	blx	r3
        if (!rv) {
   b569e:	4604      	mov	r4, r0
   b56a0:	b928      	cbnz	r0, b56ae <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b56a2:	682b      	ldr	r3, [r5, #0]
   b56a4:	4628      	mov	r0, r5
   b56a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b56a8:	4798      	blx	r3
        rv = available();
   b56aa:	4620      	mov	r0, r4
}
   b56ac:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b56ae:	2001      	movs	r0, #1
   b56b0:	e7fc      	b.n	b56ac <_ZN9TCPClient9connectedEv+0x2c>

000b56b2 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b56b2:	b510      	push	{r4, lr}
   b56b4:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b56b6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b56ba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b56be:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b56c0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b56c2:	d005      	beq.n	b56d0 <_ZN9TCPClient4peekEv+0x1e>
   b56c4:	6963      	ldr	r3, [r4, #20]
   b56c6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b56ca:	4413      	add	r3, r2
   b56cc:	7918      	ldrb	r0, [r3, #4]
}
   b56ce:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b56d0:	6803      	ldr	r3, [r0, #0]
   b56d2:	691b      	ldr	r3, [r3, #16]
   b56d4:	4798      	blx	r3
   b56d6:	2800      	cmp	r0, #0
   b56d8:	d1f4      	bne.n	b56c4 <_ZN9TCPClient4peekEv+0x12>
   b56da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b56de:	e7f6      	b.n	b56ce <_ZN9TCPClient4peekEv+0x1c>

000b56e0 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b56e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b56e2:	6943      	ldr	r3, [r0, #20]
   b56e4:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b56e6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b56ea:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b56ee:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b56f0:	4605      	mov	r5, r0
   b56f2:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b56f4:	d016      	beq.n	b5724 <_ZN9TCPClient4readEPhj+0x44>
   b56f6:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b56f8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b56fc:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5700:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5702:	42bc      	cmp	r4, r7
   b5704:	bf28      	it	cs
   b5706:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5708:	3304      	adds	r3, #4
   b570a:	4622      	mov	r2, r4
   b570c:	4419      	add	r1, r3
   b570e:	4630      	mov	r0, r6
   b5710:	f000 fc5c 	bl	b5fcc <memcpy>
   b5714:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5716:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b571a:	4423      	add	r3, r4
   b571c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5720:	4620      	mov	r0, r4
   b5722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5724:	6803      	ldr	r3, [r0, #0]
   b5726:	691b      	ldr	r3, [r3, #16]
   b5728:	4798      	blx	r3
   b572a:	2800      	cmp	r0, #0
   b572c:	d1e3      	bne.n	b56f6 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b572e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b5732:	e7f5      	b.n	b5720 <_ZN9TCPClient4readEPhj+0x40>

000b5734 <_ZN9TCPClient12flush_bufferEv>:
   b5734:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b5736:	2300      	movs	r3, #0
   b5738:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b573c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b573e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5742:	4770      	bx	lr

000b5744 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5748:	461f      	mov	r7, r3
    stop();
   b574a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b574c:	460c      	mov	r4, r1
    stop();
   b574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5750:	b08a      	sub	sp, #40	; 0x28
   b5752:	4605      	mov	r5, r0
   b5754:	4616      	mov	r6, r2
    stop();
   b5756:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5758:	7d23      	ldrb	r3, [r4, #20]
   b575a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b575e:	2b04      	cmp	r3, #4
   b5760:	bf0c      	ite	eq
   b5762:	2002      	moveq	r0, #2
   b5764:	200a      	movne	r0, #10
   b5766:	2206      	movs	r2, #6
   b5768:	2101      	movs	r1, #1
   b576a:	f7ff fa73 	bl	b4c54 <sock_socket>
   b576e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5772:	696b      	ldr	r3, [r5, #20]
   b5774:	681b      	ldr	r3, [r3, #0]
   b5776:	2b00      	cmp	r3, #0
   b5778:	da08      	bge.n	b578c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b577a:	682b      	ldr	r3, [r5, #0]
   b577c:	4628      	mov	r0, r5
   b577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5780:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5782:	4798      	blx	r3
}
   b5784:	4620      	mov	r0, r4
   b5786:	b00a      	add	sp, #40	; 0x28
   b5788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b578c:	4628      	mov	r0, r5
   b578e:	f7ff ffd1 	bl	b5734 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5792:	b1b7      	cbz	r7, b57c2 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5794:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5796:	a903      	add	r1, sp, #12
   b5798:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b579a:	9303      	str	r3, [sp, #12]
   b579c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b57a0:	f7ff fa00 	bl	b4ba4 <if_index_to_name>
   b57a4:	2800      	cmp	r0, #0
   b57a6:	d1e8      	bne.n	b577a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b57a8:	6968      	ldr	r0, [r5, #20]
   b57aa:	2306      	movs	r3, #6
   b57ac:	9300      	str	r3, [sp, #0]
   b57ae:	6800      	ldr	r0, [r0, #0]
   b57b0:	ab03      	add	r3, sp, #12
   b57b2:	f241 020b 	movw	r2, #4107	; 0x100b
   b57b6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b57ba:	f7ff fa23 	bl	b4c04 <sock_setsockopt>
   b57be:	2800      	cmp	r0, #0
   b57c0:	d1db      	bne.n	b577a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b57c2:	221c      	movs	r2, #28
   b57c4:	2100      	movs	r1, #0
   b57c6:	a803      	add	r0, sp, #12
   b57c8:	f000 fc0e 	bl	b5fe8 <memset>
    if (ip.version() == 4) {
   b57cc:	7d23      	ldrb	r3, [r4, #20]
   b57ce:	2b04      	cmp	r3, #4
   b57d0:	d11d      	bne.n	b580e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b57d2:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b57d6:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b57d8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b57dc:	f7ff f9fa 	bl	b4bd4 <inet_htons>
   b57e0:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b57e4:	6860      	ldr	r0, [r4, #4]
   b57e6:	f7ff f9ed 	bl	b4bc4 <inet_htonl>
   b57ea:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b57ec:	696b      	ldr	r3, [r5, #20]
   b57ee:	221c      	movs	r2, #28
   b57f0:	6818      	ldr	r0, [r3, #0]
   b57f2:	a903      	add	r1, sp, #12
   b57f4:	f7ff fa16 	bl	b4c24 <sock_connect>
   b57f8:	2800      	cmp	r0, #0
   b57fa:	d1be      	bne.n	b577a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b57fc:	3404      	adds	r4, #4
   b57fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5800:	696d      	ldr	r5, [r5, #20]
   b5802:	358c      	adds	r5, #140	; 0x8c
   b5804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5806:	6823      	ldr	r3, [r4, #0]
   b5808:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b580a:	2401      	movs	r4, #1
   b580c:	e7ba      	b.n	b5784 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b580e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5812:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5814:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5818:	f7ff f9dc 	bl	b4bd4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b581c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b581e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5822:	1d23      	adds	r3, r4, #4
   b5824:	f104 0714 	add.w	r7, r4, #20
   b5828:	6818      	ldr	r0, [r3, #0]
   b582a:	6859      	ldr	r1, [r3, #4]
   b582c:	4632      	mov	r2, r6
   b582e:	c203      	stmia	r2!, {r0, r1}
   b5830:	3308      	adds	r3, #8
   b5832:	42bb      	cmp	r3, r7
   b5834:	4616      	mov	r6, r2
   b5836:	d1f7      	bne.n	b5828 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5838:	e7d8      	b.n	b57ec <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b583c <_ZN9TCPClient9availableEv>:
{
   b583c:	b530      	push	{r4, r5, lr}
   b583e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5840:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b5844:	b08b      	sub	sp, #44	; 0x2c
   b5846:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b5848:	b12b      	cbz	r3, b5856 <_ZN9TCPClient9availableEv+0x1a>
   b584a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b584e:	429a      	cmp	r2, r3
   b5850:	d101      	bne.n	b5856 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b5852:	f7ff ff6f 	bl	b5734 <_ZN9TCPClient12flush_bufferEv>
   b5856:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b5858:	6808      	ldr	r0, [r1, #0]
   b585a:	2800      	cmp	r0, #0
   b585c:	db18      	blt.n	b5890 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b585e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5862:	2d7f      	cmp	r5, #127	; 0x7f
   b5864:	d814      	bhi.n	b5890 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b5866:	3104      	adds	r1, #4
   b5868:	2308      	movs	r3, #8
   b586a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b586e:	4429      	add	r1, r5
   b5870:	f7ff f9e0 	bl	b4c34 <sock_recv>
            if (ret > 0) {
   b5874:	2800      	cmp	r0, #0
   b5876:	dd13      	ble.n	b58a0 <_ZN9TCPClient9availableEv+0x64>
   b5878:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b587a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b587e:	b90a      	cbnz	r2, b5884 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5880:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5884:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b5886:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b588a:	4410      	add	r0, r2
   b588c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5890:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5892:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b5896:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b589a:	1ac0      	subs	r0, r0, r3
   b589c:	b00b      	add	sp, #44	; 0x2c
   b589e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b58a0:	f7ff fb04 	bl	b4eac <__errno>
   b58a4:	6803      	ldr	r3, [r0, #0]
   b58a6:	2b0b      	cmp	r3, #11
   b58a8:	d0f2      	beq.n	b5890 <_ZN9TCPClient9availableEv+0x54>
   b58aa:	f7ff faff 	bl	b4eac <__errno>
   b58ae:	6803      	ldr	r3, [r0, #0]
   b58b0:	2b0b      	cmp	r3, #11
   b58b2:	d0ed      	beq.n	b5890 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b58b4:	2320      	movs	r3, #32
   b58b6:	2500      	movs	r5, #0
   b58b8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b58bc:	f7ff faf6 	bl	b4eac <__errno>
   b58c0:	6803      	ldr	r3, [r0, #0]
   b58c2:	9301      	str	r3, [sp, #4]
   b58c4:	4b08      	ldr	r3, [pc, #32]	; (b58e8 <_ZN9TCPClient9availableEv+0xac>)
   b58c6:	4909      	ldr	r1, [pc, #36]	; (b58ec <_ZN9TCPClient9availableEv+0xb0>)
   b58c8:	9300      	str	r3, [sp, #0]
   b58ca:	aa02      	add	r2, sp, #8
   b58cc:	462b      	mov	r3, r5
   b58ce:	2032      	movs	r0, #50	; 0x32
   b58d0:	f7ff fa30 	bl	b4d34 <log_message>
                    sock_close(d_->sock);
   b58d4:	6963      	ldr	r3, [r4, #20]
   b58d6:	6818      	ldr	r0, [r3, #0]
   b58d8:	f7ff f99c 	bl	b4c14 <sock_close>
   b58dc:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b58de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b58e2:	601a      	str	r2, [r3, #0]
   b58e4:	e7d4      	b.n	b5890 <_ZN9TCPClient9availableEv+0x54>
   b58e6:	bf00      	nop
   b58e8:	000b629f 	.word	0x000b629f
   b58ec:	000b6298 	.word	0x000b6298

000b58f0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b58f0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b58f2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b58f4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b58f6:	6818      	ldr	r0, [r3, #0]
   b58f8:	2800      	cmp	r0, #0
   b58fa:	db01      	blt.n	b5900 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b58fc:	f7ff f98a 	bl	b4c14 <sock_close>
   b5900:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5906:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5908:	6960      	ldr	r0, [r4, #20]
   b590a:	2211      	movs	r2, #17
   b590c:	2100      	movs	r1, #0
   b590e:	308c      	adds	r0, #140	; 0x8c
   b5910:	f000 fb6a 	bl	b5fe8 <memset>
    flush_buffer();
   b5914:	4620      	mov	r0, r4
}
   b5916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b591a:	f7ff bf0b 	b.w	b5734 <_ZN9TCPClient12flush_bufferEv>

000b591e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b591e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5920:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5922:	4604      	mov	r4, r0
          total(0) {
   b5924:	6001      	str	r1, [r0, #0]
   b5926:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b592a:	3088      	adds	r0, #136	; 0x88
   b592c:	f7ff fb5a 	bl	b4fe4 <_ZN9IPAddressC1Ev>
}
   b5930:	4620      	mov	r0, r4
   b5932:	bd10      	pop	{r4, pc}

000b5934 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5934:	b573      	push	{r0, r1, r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5936:	2300      	movs	r3, #0
   b5938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b593c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5940:	4a0e      	ldr	r2, [pc, #56]	; (b597c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5942:	6103      	str	r3, [r0, #16]
   b5944:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5946:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5948:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b594a:	20ac      	movs	r0, #172	; 0xac
   b594c:	9101      	str	r1, [sp, #4]
   b594e:	f7fe fba0 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5952:	1e05      	subs	r5, r0, #0
   b5954:	f105 060c 	add.w	r6, r5, #12
   b5958:	d008      	beq.n	b596c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b595a:	2301      	movs	r3, #1
   b595c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5960:	4b07      	ldr	r3, [pc, #28]	; (b5980 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5962:	9901      	ldr	r1, [sp, #4]
   b5964:	602b      	str	r3, [r5, #0]
   b5966:	4630      	mov	r0, r6
   b5968:	f7ff ffd9 	bl	b591e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b596c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b596e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b5972:	f7ff fedf 	bl	b5734 <_ZN9TCPClient12flush_bufferEv>
}
   b5976:	b002      	add	sp, #8
   b5978:	bd70      	pop	{r4, r5, r6, pc}
   b597a:	bf00      	nop
   b597c:	000b62d4 	.word	0x000b62d4
   b5980:	000b62b8 	.word	0x000b62b8

000b5984 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5984:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b5986:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b598a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b598c:	f7ff ffd2 	bl	b5934 <_ZN9TCPClientC1Ei>
}
   b5990:	4620      	mov	r0, r4
   b5992:	bd10      	pop	{r4, pc}

000b5994 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5994:	b510      	push	{r4, lr}
   b5996:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5998:	6800      	ldr	r0, [r0, #0]
   b599a:	2800      	cmp	r0, #0
   b599c:	db01      	blt.n	b59a2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b599e:	f7ff f939 	bl	b4c14 <sock_close>
    }
}
   b59a2:	4620      	mov	r0, r4
   b59a4:	bd10      	pop	{r4, pc}

000b59a6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b59a6:	300c      	adds	r0, #12
   b59a8:	f7ff bff4 	b.w	b5994 <_ZN9TCPClient4DataD1Ev>

000b59ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b59ac:	4b02      	ldr	r3, [pc, #8]	; (b59b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b59ae:	681a      	ldr	r2, [r3, #0]
   b59b0:	4b02      	ldr	r3, [pc, #8]	; (b59bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b59b2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b59b4:	4770      	bx	lr
   b59b6:	bf00      	nop
   b59b8:	2003e60c 	.word	0x2003e60c
   b59bc:	2003e714 	.word	0x2003e714

000b59c0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b59c0:	4770      	bx	lr

000b59c2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b59c2:	7441      	strb	r1, [r0, #17]
}
   b59c4:	4770      	bx	lr

000b59c6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b59c6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b59c8:	7c00      	ldrb	r0, [r0, #16]
   b59ca:	f7ff f973 	bl	b4cb4 <hal_usart_available_data_for_write>
}
   b59ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b59d2:	bd08      	pop	{r3, pc}

000b59d4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b59d4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b59d6:	7c00      	ldrb	r0, [r0, #16]
   b59d8:	f7ff f94c 	bl	b4c74 <hal_usart_available>
}
   b59dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b59e0:	bd08      	pop	{r3, pc}

000b59e2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b59e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b59e4:	7c00      	ldrb	r0, [r0, #16]
   b59e6:	f7ff f955 	bl	b4c94 <hal_usart_peek>
}
   b59ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b59ee:	bd08      	pop	{r3, pc}

000b59f0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b59f0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b59f2:	7c00      	ldrb	r0, [r0, #16]
   b59f4:	f7ff f946 	bl	b4c84 <hal_usart_read>
}
   b59f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b59fc:	bd08      	pop	{r3, pc}

000b59fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b59fe:	7c00      	ldrb	r0, [r0, #16]
   b5a00:	f7ff b950 	b.w	b4ca4 <hal_usart_flush>

000b5a04 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5a06:	7c45      	ldrb	r5, [r0, #17]
{
   b5a08:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5a0a:	b12d      	cbz	r5, b5a18 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5a0c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5a0e:	b003      	add	sp, #12
   b5a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5a14:	f7ff b926 	b.w	b4c64 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5a18:	7c00      	ldrb	r0, [r0, #16]
   b5a1a:	9101      	str	r1, [sp, #4]
   b5a1c:	f7ff f94a 	bl	b4cb4 <hal_usart_available_data_for_write>
   b5a20:	2800      	cmp	r0, #0
   b5a22:	9901      	ldr	r1, [sp, #4]
   b5a24:	dcf2      	bgt.n	b5a0c <_ZN11USARTSerial5writeEh+0x8>
}
   b5a26:	4628      	mov	r0, r5
   b5a28:	b003      	add	sp, #12
   b5a2a:	bd30      	pop	{r4, r5, pc}

000b5a2c <_ZN11USARTSerialD0Ev>:
   b5a2c:	b510      	push	{r4, lr}
   b5a2e:	2114      	movs	r1, #20
   b5a30:	4604      	mov	r4, r0
   b5a32:	f7fe fb34 	bl	b409e <_ZdlPvj>
   b5a36:	4620      	mov	r0, r4
   b5a38:	bd10      	pop	{r4, pc}
	...

000b5a3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5a3c:	b510      	push	{r4, lr}
   b5a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5a42:	4604      	mov	r4, r0
   b5a44:	4608      	mov	r0, r1
   b5a46:	4611      	mov	r1, r2
   b5a48:	2200      	movs	r2, #0
   b5a4a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5a4e:	4b04      	ldr	r3, [pc, #16]	; (b5a60 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5a50:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5a52:	2301      	movs	r3, #1
  _serial = serial;
   b5a54:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5a56:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5a58:	f7ff f934 	bl	b4cc4 <hal_usart_init_ex>
}
   b5a5c:	4620      	mov	r0, r4
   b5a5e:	bd10      	pop	{r4, pc}
   b5a60:	000b633c 	.word	0x000b633c

000b5a64 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5a64:	7441      	strb	r1, [r0, #17]
}
   b5a66:	4770      	bx	lr

000b5a68 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5a68:	4770      	bx	lr

000b5a6a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5a6a:	4770      	bx	lr

000b5a6c <_ZN9USBSerial4readEv>:
{
   b5a6c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5a6e:	2100      	movs	r1, #0
   b5a70:	7c00      	ldrb	r0, [r0, #16]
   b5a72:	f7ff f947 	bl	b4d04 <HAL_USB_USART_Receive_Data>
}
   b5a76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5a7a:	bd08      	pop	{r3, pc}

000b5a7c <_ZN9USBSerial4peekEv>:
{
   b5a7c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5a7e:	2101      	movs	r1, #1
   b5a80:	7c00      	ldrb	r0, [r0, #16]
   b5a82:	f7ff f93f 	bl	b4d04 <HAL_USB_USART_Receive_Data>
}
   b5a86:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5a8a:	bd08      	pop	{r3, pc}

000b5a8c <_ZN9USBSerial17availableForWriteEv>:
{
   b5a8c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5a8e:	7c00      	ldrb	r0, [r0, #16]
   b5a90:	f7ff f930 	bl	b4cf4 <HAL_USB_USART_Available_Data_For_Write>
}
   b5a94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5a98:	bd08      	pop	{r3, pc}

000b5a9a <_ZN9USBSerial9availableEv>:
{
   b5a9a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5a9c:	7c00      	ldrb	r0, [r0, #16]
   b5a9e:	f7ff f921 	bl	b4ce4 <HAL_USB_USART_Available_Data>
}
   b5aa2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5aa6:	bd08      	pop	{r3, pc}

000b5aa8 <_ZN9USBSerial5writeEh>:
{
   b5aa8:	b513      	push	{r0, r1, r4, lr}
   b5aaa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5aac:	7c00      	ldrb	r0, [r0, #16]
{
   b5aae:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5ab0:	f7ff f920 	bl	b4cf4 <HAL_USB_USART_Available_Data_For_Write>
   b5ab4:	2800      	cmp	r0, #0
   b5ab6:	9901      	ldr	r1, [sp, #4]
   b5ab8:	dc01      	bgt.n	b5abe <_ZN9USBSerial5writeEh+0x16>
   b5aba:	7c60      	ldrb	r0, [r4, #17]
   b5abc:	b120      	cbz	r0, b5ac8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5abe:	7c20      	ldrb	r0, [r4, #16]
   b5ac0:	f7ff f928 	bl	b4d14 <HAL_USB_USART_Send_Data>
   b5ac4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5ac8:	b002      	add	sp, #8
   b5aca:	bd10      	pop	{r4, pc}

000b5acc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5acc:	7c00      	ldrb	r0, [r0, #16]
   b5ace:	f7ff b929 	b.w	b4d24 <HAL_USB_USART_Flush_Data>

000b5ad2 <_ZN9USBSerialD0Ev>:
   b5ad2:	b510      	push	{r4, lr}
   b5ad4:	2114      	movs	r1, #20
   b5ad6:	4604      	mov	r4, r0
   b5ad8:	f7fe fae1 	bl	b409e <_ZdlPvj>
   b5adc:	4620      	mov	r0, r4
   b5ade:	bd10      	pop	{r4, pc}

000b5ae0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5ae0:	b510      	push	{r4, lr}
   b5ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5ae6:	4604      	mov	r4, r0
   b5ae8:	4608      	mov	r0, r1
   b5aea:	2100      	movs	r1, #0
   b5aec:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5af0:	4b04      	ldr	r3, [pc, #16]	; (b5b04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5af2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5af4:	2301      	movs	r3, #1
  _serial = serial;
   b5af6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5af8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5afa:	4611      	mov	r1, r2
   b5afc:	f7ff f8ea 	bl	b4cd4 <HAL_USB_USART_Init>
}
   b5b00:	4620      	mov	r0, r4
   b5b02:	bd10      	pop	{r4, pc}
   b5b04:	000b636c 	.word	0x000b636c

000b5b08 <_Z19acquireSerialBufferv>:
{
   b5b08:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5b0a:	2214      	movs	r2, #20
{
   b5b0c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5b0e:	2100      	movs	r1, #0
   b5b10:	f000 fa6a 	bl	b5fe8 <memset>
}
   b5b14:	4620      	mov	r0, r4
   b5b16:	bd10      	pop	{r4, pc}

000b5b18 <_Z16_fetch_usbserialv>:
{
   b5b18:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5b1a:	4c0f      	ldr	r4, [pc, #60]	; (b5b58 <_Z16_fetch_usbserialv+0x40>)
{
   b5b1c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5b1e:	a803      	add	r0, sp, #12
   b5b20:	f7ff fff2 	bl	b5b08 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5b24:	7821      	ldrb	r1, [r4, #0]
   b5b26:	f3bf 8f5b 	dmb	ish
   b5b2a:	f011 0101 	ands.w	r1, r1, #1
   b5b2e:	d10f      	bne.n	b5b50 <_Z16_fetch_usbserialv+0x38>
   b5b30:	4620      	mov	r0, r4
   b5b32:	9101      	str	r1, [sp, #4]
   b5b34:	f7fe fab5 	bl	b40a2 <__cxa_guard_acquire>
   b5b38:	9901      	ldr	r1, [sp, #4]
   b5b3a:	b148      	cbz	r0, b5b50 <_Z16_fetch_usbserialv+0x38>
   b5b3c:	aa03      	add	r2, sp, #12
   b5b3e:	4807      	ldr	r0, [pc, #28]	; (b5b5c <_Z16_fetch_usbserialv+0x44>)
   b5b40:	f7ff ffce 	bl	b5ae0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5b44:	4620      	mov	r0, r4
   b5b46:	f7fe fab1 	bl	b40ac <__cxa_guard_release>
   b5b4a:	4805      	ldr	r0, [pc, #20]	; (b5b60 <_Z16_fetch_usbserialv+0x48>)
   b5b4c:	f000 fa38 	bl	b5fc0 <atexit>
	return _usbserial;
}
   b5b50:	4802      	ldr	r0, [pc, #8]	; (b5b5c <_Z16_fetch_usbserialv+0x44>)
   b5b52:	b008      	add	sp, #32
   b5b54:	bd10      	pop	{r4, pc}
   b5b56:	bf00      	nop
   b5b58:	2003e718 	.word	0x2003e718
   b5b5c:	2003e71c 	.word	0x2003e71c
   b5b60:	000b5a69 	.word	0x000b5a69

000b5b64 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5b64:	2200      	movs	r2, #0
   b5b66:	6840      	ldr	r0, [r0, #4]
   b5b68:	4611      	mov	r1, r2
   b5b6a:	f7ff b93f 	b.w	b4dec <network_ready>

000b5b6e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5b6e:	2200      	movs	r2, #0
   b5b70:	6840      	ldr	r0, [r0, #4]
   b5b72:	4611      	mov	r1, r2
   b5b74:	f7ff b95a 	b.w	b4e2c <network_listening>

000b5b78 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5b78:	2200      	movs	r2, #0
   b5b7a:	6840      	ldr	r0, [r0, #4]
   b5b7c:	4611      	mov	r1, r2
   b5b7e:	f7ff b965 	b.w	b4e4c <network_get_listen_timeout>

000b5b82 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5b82:	6840      	ldr	r0, [r0, #4]
   b5b84:	2200      	movs	r2, #0
   b5b86:	f7ff b959 	b.w	b4e3c <network_set_listen_timeout>

000b5b8a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5b8a:	6840      	ldr	r0, [r0, #4]
   b5b8c:	2200      	movs	r2, #0
   b5b8e:	f081 0101 	eor.w	r1, r1, #1
   b5b92:	f7ff b943 	b.w	b4e1c <network_listen>

000b5b96 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5b96:	2300      	movs	r3, #0
   b5b98:	6840      	ldr	r0, [r0, #4]
   b5b9a:	461a      	mov	r2, r3
   b5b9c:	4619      	mov	r1, r3
   b5b9e:	f7ff b935 	b.w	b4e0c <network_off>

000b5ba2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5ba2:	2300      	movs	r3, #0
   b5ba4:	6840      	ldr	r0, [r0, #4]
   b5ba6:	461a      	mov	r2, r3
   b5ba8:	4619      	mov	r1, r3
   b5baa:	f7ff b927 	b.w	b4dfc <network_on>

000b5bae <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5bae:	2200      	movs	r2, #0
   b5bb0:	6840      	ldr	r0, [r0, #4]
   b5bb2:	4611      	mov	r1, r2
   b5bb4:	f7ff b90a 	b.w	b4dcc <network_connecting>

000b5bb8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5bb8:	6840      	ldr	r0, [r0, #4]
   b5bba:	2200      	movs	r2, #0
   b5bbc:	2102      	movs	r1, #2
   b5bbe:	f7ff b90d 	b.w	b4ddc <network_disconnect>

000b5bc2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5bc2:	2300      	movs	r3, #0
   b5bc4:	6840      	ldr	r0, [r0, #4]
   b5bc6:	461a      	mov	r2, r3
   b5bc8:	f7ff b8f8 	b.w	b4dbc <network_connect>

000b5bcc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5bcc:	4b02      	ldr	r3, [pc, #8]	; (b5bd8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5bce:	2204      	movs	r2, #4
   b5bd0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5bd2:	4a02      	ldr	r2, [pc, #8]	; (b5bdc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5bd4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5bd6:	4770      	bx	lr
   b5bd8:	2003e730 	.word	0x2003e730
   b5bdc:	000b639c 	.word	0x000b639c

000b5be0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5be0:	4b01      	ldr	r3, [pc, #4]	; (b5be8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5be2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5be4:	4770      	bx	lr
   b5be6:	bf00      	nop
   b5be8:	2003e610 	.word	0x2003e610

000b5bec <serialEventRun>:
{
   b5bec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5bee:	4b0b      	ldr	r3, [pc, #44]	; (b5c1c <serialEventRun+0x30>)
   b5bf0:	b143      	cbz	r3, b5c04 <serialEventRun+0x18>
   b5bf2:	f7ff ff91 	bl	b5b18 <_Z16_fetch_usbserialv>
   b5bf6:	6803      	ldr	r3, [r0, #0]
   b5bf8:	691b      	ldr	r3, [r3, #16]
   b5bfa:	4798      	blx	r3
   b5bfc:	2800      	cmp	r0, #0
   b5bfe:	dd01      	ble.n	b5c04 <serialEventRun+0x18>
        serialEvent();
   b5c00:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5c04:	4b06      	ldr	r3, [pc, #24]	; (b5c20 <serialEventRun+0x34>)
   b5c06:	b143      	cbz	r3, b5c1a <serialEventRun+0x2e>
   b5c08:	f000 f8a2 	bl	b5d50 <_Z22__fetch_global_Serial1v>
   b5c0c:	6803      	ldr	r3, [r0, #0]
   b5c0e:	691b      	ldr	r3, [r3, #16]
   b5c10:	4798      	blx	r3
   b5c12:	2800      	cmp	r0, #0
   b5c14:	dd01      	ble.n	b5c1a <serialEventRun+0x2e>
        serialEvent1();
   b5c16:	f3af 8000 	nop.w
}
   b5c1a:	bd08      	pop	{r3, pc}
	...

000b5c24 <_post_loop>:
{
   b5c24:	b508      	push	{r3, lr}
	serialEventRun();
   b5c26:	f7ff ffe1 	bl	b5bec <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5c2a:	f7fe ffb3 	bl	b4b94 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5c2e:	4b01      	ldr	r3, [pc, #4]	; (b5c34 <_post_loop+0x10>)
   b5c30:	6018      	str	r0, [r3, #0]
}
   b5c32:	bd08      	pop	{r3, pc}
   b5c34:	2003e740 	.word	0x2003e740

000b5c38 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5c38:	4805      	ldr	r0, [pc, #20]	; (b5c50 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5c3a:	4a06      	ldr	r2, [pc, #24]	; (b5c54 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5c3c:	4906      	ldr	r1, [pc, #24]	; (b5c58 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5c3e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5c40:	1a12      	subs	r2, r2, r0
   b5c42:	f000 f9c3 	bl	b5fcc <memcpy>
    __backup_sram_signature = signature;
   b5c46:	4b05      	ldr	r3, [pc, #20]	; (b5c5c <_Z33system_initialize_user_backup_ramv+0x24>)
   b5c48:	4a05      	ldr	r2, [pc, #20]	; (b5c60 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5c4a:	601a      	str	r2, [r3, #0]
}
   b5c4c:	bd08      	pop	{r3, pc}
   b5c4e:	bf00      	nop
   b5c50:	2003f400 	.word	0x2003f400
   b5c54:	2003f404 	.word	0x2003f404
   b5c58:	000b6584 	.word	0x000b6584
   b5c5c:	2003f400 	.word	0x2003f400
   b5c60:	9a271c1e 	.word	0x9a271c1e

000b5c64 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5c64:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5c66:	2300      	movs	r3, #0
   b5c68:	9300      	str	r3, [sp, #0]
   b5c6a:	461a      	mov	r2, r3
   b5c6c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5c70:	f7ff f88a 	bl	b4d88 <system_ctrl_set_result>
}
   b5c74:	b003      	add	sp, #12
   b5c76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5c7c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5c7c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5c7e:	8843      	ldrh	r3, [r0, #2]
   b5c80:	2b0a      	cmp	r3, #10
   b5c82:	d008      	beq.n	b5c96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5c84:	2b50      	cmp	r3, #80	; 0x50
   b5c86:	d10b      	bne.n	b5ca0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5c88:	4b09      	ldr	r3, [pc, #36]	; (b5cb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5c8a:	681b      	ldr	r3, [r3, #0]
   b5c8c:	b14b      	cbz	r3, b5ca2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5c8e:	b003      	add	sp, #12
   b5c90:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5c94:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5c96:	f7ff ffe5 	bl	b5c64 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5c9a:	b003      	add	sp, #12
   b5c9c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5ca0:	2300      	movs	r3, #0
   b5ca2:	9300      	str	r3, [sp, #0]
   b5ca4:	461a      	mov	r2, r3
   b5ca6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5caa:	f7ff f86d 	bl	b4d88 <system_ctrl_set_result>
}
   b5cae:	e7f4      	b.n	b5c9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5cb0:	2003e73c 	.word	0x2003e73c

000b5cb4 <module_user_init_hook>:
{
   b5cb4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5cb6:	4812      	ldr	r0, [pc, #72]	; (b5d00 <module_user_init_hook+0x4c>)
   b5cb8:	2100      	movs	r1, #0
   b5cba:	f7ff f907 	bl	b4ecc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5cbe:	4b11      	ldr	r3, [pc, #68]	; (b5d04 <module_user_init_hook+0x50>)
   b5cc0:	681a      	ldr	r2, [r3, #0]
   b5cc2:	4b11      	ldr	r3, [pc, #68]	; (b5d08 <module_user_init_hook+0x54>)
   b5cc4:	429a      	cmp	r2, r3
   b5cc6:	4b11      	ldr	r3, [pc, #68]	; (b5d0c <module_user_init_hook+0x58>)
   b5cc8:	bf0c      	ite	eq
   b5cca:	2201      	moveq	r2, #1
   b5ccc:	2200      	movne	r2, #0
   b5cce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5cd0:	d001      	beq.n	b5cd6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5cd2:	f7ff ffb1 	bl	b5c38 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5cd6:	f7fe ff55 	bl	b4b84 <HAL_RNG_GetRandomNumber>
   b5cda:	4604      	mov	r4, r0
    srand(seed);
   b5cdc:	f000 f98c 	bl	b5ff8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5ce0:	4b0b      	ldr	r3, [pc, #44]	; (b5d10 <module_user_init_hook+0x5c>)
   b5ce2:	b113      	cbz	r3, b5cea <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5ce4:	4620      	mov	r0, r4
   b5ce6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5cea:	2100      	movs	r1, #0
   b5cec:	4808      	ldr	r0, [pc, #32]	; (b5d10 <module_user_init_hook+0x5c>)
   b5cee:	f7ff f85d 	bl	b4dac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5cf6:	4807      	ldr	r0, [pc, #28]	; (b5d14 <module_user_init_hook+0x60>)
   b5cf8:	2100      	movs	r1, #0
   b5cfa:	f7ff b83b 	b.w	b4d74 <system_ctrl_set_app_request_handler>
   b5cfe:	bf00      	nop
   b5d00:	000b5be1 	.word	0x000b5be1
   b5d04:	2003f400 	.word	0x2003f400
   b5d08:	9a271c1e 	.word	0x9a271c1e
   b5d0c:	2003e738 	.word	0x2003e738
   b5d10:	00000000 	.word	0x00000000
   b5d14:	000b5c7d 	.word	0x000b5c7d

000b5d18 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5d18:	4770      	bx	lr
	...

000b5d1c <_Z20acquireSerial1Bufferv>:
{
   b5d1c:	b538      	push	{r3, r4, r5, lr}
   b5d1e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5d20:	2514      	movs	r5, #20
   b5d22:	462a      	mov	r2, r5
   b5d24:	2100      	movs	r1, #0
   b5d26:	f000 f95f 	bl	b5fe8 <memset>
   b5d2a:	8025      	strh	r5, [r4, #0]
   b5d2c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5d2e:	4907      	ldr	r1, [pc, #28]	; (b5d4c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5d30:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5d32:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5d34:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5d36:	f000 f82f 	bl	b5d98 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5d3a:	4904      	ldr	r1, [pc, #16]	; (b5d4c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5d3c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5d3e:	4628      	mov	r0, r5
   b5d40:	f000 f82a 	bl	b5d98 <_ZnajRKSt9nothrow_t>
    };
   b5d44:	60e0      	str	r0, [r4, #12]
}
   b5d46:	4620      	mov	r0, r4
   b5d48:	bd38      	pop	{r3, r4, r5, pc}
   b5d4a:	bf00      	nop
   b5d4c:	000b63d0 	.word	0x000b63d0

000b5d50 <_Z22__fetch_global_Serial1v>:
{
   b5d50:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5d52:	4d0e      	ldr	r5, [pc, #56]	; (b5d8c <_Z22__fetch_global_Serial1v+0x3c>)
   b5d54:	7829      	ldrb	r1, [r5, #0]
   b5d56:	f3bf 8f5b 	dmb	ish
   b5d5a:	f011 0401 	ands.w	r4, r1, #1
{
   b5d5e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5d60:	d111      	bne.n	b5d86 <_Z22__fetch_global_Serial1v+0x36>
   b5d62:	4628      	mov	r0, r5
   b5d64:	f7fe f99d 	bl	b40a2 <__cxa_guard_acquire>
   b5d68:	b168      	cbz	r0, b5d86 <_Z22__fetch_global_Serial1v+0x36>
   b5d6a:	a801      	add	r0, sp, #4
   b5d6c:	f7ff ffd6 	bl	b5d1c <_Z20acquireSerial1Bufferv>
   b5d70:	aa01      	add	r2, sp, #4
   b5d72:	4621      	mov	r1, r4
   b5d74:	4806      	ldr	r0, [pc, #24]	; (b5d90 <_Z22__fetch_global_Serial1v+0x40>)
   b5d76:	f7ff fe61 	bl	b5a3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5d7a:	4628      	mov	r0, r5
   b5d7c:	f7fe f996 	bl	b40ac <__cxa_guard_release>
   b5d80:	4804      	ldr	r0, [pc, #16]	; (b5d94 <_Z22__fetch_global_Serial1v+0x44>)
   b5d82:	f000 f91d 	bl	b5fc0 <atexit>
    return serial1;
}
   b5d86:	4802      	ldr	r0, [pc, #8]	; (b5d90 <_Z22__fetch_global_Serial1v+0x40>)
   b5d88:	b007      	add	sp, #28
   b5d8a:	bd30      	pop	{r4, r5, pc}
   b5d8c:	2003e744 	.word	0x2003e744
   b5d90:	2003e748 	.word	0x2003e748
   b5d94:	000b5d19 	.word	0x000b5d19

000b5d98 <_ZnajRKSt9nothrow_t>:
   b5d98:	f7fe b97d 	b.w	b4096 <_Znaj>

000b5d9c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b5d9c:	4901      	ldr	r1, [pc, #4]	; (b5da4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b5d9e:	f000 b8f9 	b.w	b5f94 <_ZNKSt9type_infoeqERKS_>
   b5da2:	bf00      	nop
   b5da4:	000b63ec 	.word	0x000b63ec

000b5da8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b5da8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5daa:	2400      	movs	r4, #0
   b5dac:	2310      	movs	r3, #16
   b5dae:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b5db2:	6803      	ldr	r3, [r0, #0]
   b5db4:	4615      	mov	r5, r2
   b5db6:	699e      	ldr	r6, [r3, #24]
   b5db8:	6812      	ldr	r2, [r2, #0]
   b5dba:	466b      	mov	r3, sp
   b5dbc:	e9cd 4400 	strd	r4, r4, [sp]
   b5dc0:	47b0      	blx	r6
   b5dc2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5dc6:	f003 0306 	and.w	r3, r3, #6
   b5dca:	2b06      	cmp	r3, #6
   b5dcc:	bf03      	ittte	eq
   b5dce:	9b00      	ldreq	r3, [sp, #0]
   b5dd0:	602b      	streq	r3, [r5, #0]
   b5dd2:	2001      	moveq	r0, #1
   b5dd4:	4620      	movne	r0, r4
   b5dd6:	b004      	add	sp, #16
   b5dd8:	bd70      	pop	{r4, r5, r6, pc}

000b5dda <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b5dda:	9800      	ldr	r0, [sp, #0]
   b5ddc:	4290      	cmp	r0, r2
   b5dde:	bf14      	ite	ne
   b5de0:	2001      	movne	r0, #1
   b5de2:	2006      	moveq	r0, #6
   b5de4:	4770      	bx	lr
	...

000b5de8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b5de8:	b510      	push	{r4, lr}
   b5dea:	4b03      	ldr	r3, [pc, #12]	; (b5df8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b5dec:	6003      	str	r3, [r0, #0]
   b5dee:	4604      	mov	r4, r0
   b5df0:	f000 f8cd 	bl	b5f8e <_ZNSt9type_infoD1Ev>
   b5df4:	4620      	mov	r0, r4
   b5df6:	bd10      	pop	{r4, pc}
   b5df8:	000b642c 	.word	0x000b642c

000b5dfc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b5dfc:	b510      	push	{r4, lr}
   b5dfe:	4604      	mov	r4, r0
   b5e00:	f7ff fff2 	bl	b5de8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5e04:	4620      	mov	r0, r4
   b5e06:	2108      	movs	r1, #8
   b5e08:	f7fe f949 	bl	b409e <_ZdlPvj>
   b5e0c:	4620      	mov	r0, r4
   b5e0e:	bd10      	pop	{r4, pc}

000b5e10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b5e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5e14:	461f      	mov	r7, r3
   b5e16:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b5e1a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b5e1e:	4598      	cmp	r8, r3
   b5e20:	4606      	mov	r6, r0
   b5e22:	4615      	mov	r5, r2
   b5e24:	d107      	bne.n	b5e36 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5e26:	9907      	ldr	r1, [sp, #28]
   b5e28:	f000 f8b4 	bl	b5f94 <_ZNKSt9type_infoeqERKS_>
   b5e2c:	b118      	cbz	r0, b5e36 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5e2e:	7165      	strb	r5, [r4, #5]
   b5e30:	2000      	movs	r0, #0
   b5e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5e36:	4639      	mov	r1, r7
   b5e38:	4630      	mov	r0, r6
   b5e3a:	f000 f8ab 	bl	b5f94 <_ZNKSt9type_infoeqERKS_>
   b5e3e:	2800      	cmp	r0, #0
   b5e40:	d0f6      	beq.n	b5e30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b5e42:	2301      	movs	r3, #1
   b5e44:	f8c4 8000 	str.w	r8, [r4]
   b5e48:	7125      	strb	r5, [r4, #4]
   b5e4a:	71a3      	strb	r3, [r4, #6]
   b5e4c:	e7f0      	b.n	b5e30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b5e4e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b5e4e:	b538      	push	{r3, r4, r5, lr}
   b5e50:	4615      	mov	r5, r2
   b5e52:	461c      	mov	r4, r3
   b5e54:	f000 f89e 	bl	b5f94 <_ZNKSt9type_infoeqERKS_>
   b5e58:	b120      	cbz	r0, b5e64 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b5e5a:	2308      	movs	r3, #8
   b5e5c:	60e3      	str	r3, [r4, #12]
   b5e5e:	2306      	movs	r3, #6
   b5e60:	6025      	str	r5, [r4, #0]
   b5e62:	7123      	strb	r3, [r4, #4]
   b5e64:	bd38      	pop	{r3, r4, r5, pc}

000b5e66 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b5e66:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5e68:	4605      	mov	r5, r0
   b5e6a:	460c      	mov	r4, r1
   b5e6c:	9201      	str	r2, [sp, #4]
   b5e6e:	461e      	mov	r6, r3
   b5e70:	f000 f890 	bl	b5f94 <_ZNKSt9type_infoeqERKS_>
   b5e74:	b950      	cbnz	r0, b5e8c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5e76:	2e03      	cmp	r6, #3
   b5e78:	d808      	bhi.n	b5e8c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5e7a:	6823      	ldr	r3, [r4, #0]
   b5e7c:	9a01      	ldr	r2, [sp, #4]
   b5e7e:	695b      	ldr	r3, [r3, #20]
   b5e80:	4629      	mov	r1, r5
   b5e82:	4620      	mov	r0, r4
   b5e84:	b002      	add	sp, #8
   b5e86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5e8a:	4718      	bx	r3
   b5e8c:	b002      	add	sp, #8
   b5e8e:	bd70      	pop	{r4, r5, r6, pc}

000b5e90 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b5e90:	b510      	push	{r4, lr}
   b5e92:	4b03      	ldr	r3, [pc, #12]	; (b5ea0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b5e94:	6003      	str	r3, [r0, #0]
   b5e96:	4604      	mov	r4, r0
   b5e98:	f7ff ffa6 	bl	b5de8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5e9c:	4620      	mov	r0, r4
   b5e9e:	bd10      	pop	{r4, pc}
   b5ea0:	000b648c 	.word	0x000b648c

000b5ea4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b5ea4:	b510      	push	{r4, lr}
   b5ea6:	4604      	mov	r4, r0
   b5ea8:	f7ff fff2 	bl	b5e90 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b5eac:	4620      	mov	r0, r4
   b5eae:	210c      	movs	r1, #12
   b5eb0:	f7fe f8f5 	bl	b409e <_ZdlPvj>
   b5eb4:	4620      	mov	r0, r4
   b5eb6:	bd10      	pop	{r4, pc}

000b5eb8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b5eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5eba:	9f08      	ldr	r7, [sp, #32]
   b5ebc:	4297      	cmp	r7, r2
   b5ebe:	4605      	mov	r5, r0
   b5ec0:	460e      	mov	r6, r1
   b5ec2:	4614      	mov	r4, r2
   b5ec4:	d00a      	beq.n	b5edc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b5ec6:	68a8      	ldr	r0, [r5, #8]
   b5ec8:	6802      	ldr	r2, [r0, #0]
   b5eca:	9708      	str	r7, [sp, #32]
   b5ecc:	6a15      	ldr	r5, [r2, #32]
   b5ece:	4631      	mov	r1, r6
   b5ed0:	4622      	mov	r2, r4
   b5ed2:	46ac      	mov	ip, r5
   b5ed4:	b003      	add	sp, #12
   b5ed6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5eda:	4760      	bx	ip
   b5edc:	4619      	mov	r1, r3
   b5ede:	9301      	str	r3, [sp, #4]
   b5ee0:	f000 f858 	bl	b5f94 <_ZNKSt9type_infoeqERKS_>
   b5ee4:	9b01      	ldr	r3, [sp, #4]
   b5ee6:	2800      	cmp	r0, #0
   b5ee8:	d0ed      	beq.n	b5ec6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b5eea:	2006      	movs	r0, #6
   b5eec:	b003      	add	sp, #12
   b5eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5ef0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b5ef0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ef4:	460d      	mov	r5, r1
   b5ef6:	4619      	mov	r1, r3
   b5ef8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b5efc:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b5f00:	4681      	mov	r9, r0
   b5f02:	4617      	mov	r7, r2
   b5f04:	4698      	mov	r8, r3
   b5f06:	f000 f845 	bl	b5f94 <_ZNKSt9type_infoeqERKS_>
   b5f0a:	b190      	cbz	r0, b5f32 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b5f0c:	2d00      	cmp	r5, #0
   b5f0e:	6034      	str	r4, [r6, #0]
   b5f10:	7137      	strb	r7, [r6, #4]
   b5f12:	db09      	blt.n	b5f28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b5f14:	1961      	adds	r1, r4, r5
   b5f16:	458a      	cmp	sl, r1
   b5f18:	bf0c      	ite	eq
   b5f1a:	2106      	moveq	r1, #6
   b5f1c:	2101      	movne	r1, #1
   b5f1e:	71b1      	strb	r1, [r6, #6]
   b5f20:	2000      	movs	r0, #0
   b5f22:	b001      	add	sp, #4
   b5f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5f28:	3502      	adds	r5, #2
   b5f2a:	d1f9      	bne.n	b5f20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5f2c:	2301      	movs	r3, #1
   b5f2e:	71b3      	strb	r3, [r6, #6]
   b5f30:	e7f6      	b.n	b5f20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5f32:	4554      	cmp	r4, sl
   b5f34:	d106      	bne.n	b5f44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b5f36:	4659      	mov	r1, fp
   b5f38:	4648      	mov	r0, r9
   b5f3a:	f000 f82b 	bl	b5f94 <_ZNKSt9type_infoeqERKS_>
   b5f3e:	b108      	cbz	r0, b5f44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b5f40:	7177      	strb	r7, [r6, #5]
   b5f42:	e7ed      	b.n	b5f20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5f44:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b5f48:	6803      	ldr	r3, [r0, #0]
   b5f4a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b5f4e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b5f52:	69dc      	ldr	r4, [r3, #28]
   b5f54:	463a      	mov	r2, r7
   b5f56:	4643      	mov	r3, r8
   b5f58:	4629      	mov	r1, r5
   b5f5a:	46a4      	mov	ip, r4
   b5f5c:	b001      	add	sp, #4
   b5f5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f62:	4760      	bx	ip

000b5f64 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b5f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5f68:	4607      	mov	r7, r0
   b5f6a:	460c      	mov	r4, r1
   b5f6c:	4615      	mov	r5, r2
   b5f6e:	461e      	mov	r6, r3
   b5f70:	f7ff ff6d 	bl	b5e4e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b5f74:	b948      	cbnz	r0, b5f8a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b5f76:	68b8      	ldr	r0, [r7, #8]
   b5f78:	6803      	ldr	r3, [r0, #0]
   b5f7a:	699f      	ldr	r7, [r3, #24]
   b5f7c:	462a      	mov	r2, r5
   b5f7e:	4633      	mov	r3, r6
   b5f80:	4621      	mov	r1, r4
   b5f82:	46bc      	mov	ip, r7
   b5f84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b5f88:	4760      	bx	ip
   b5f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5f8e <_ZNSt9type_infoD1Ev>:
   b5f8e:	4770      	bx	lr

000b5f90 <_ZNKSt9type_info14__is_pointer_pEv>:
   b5f90:	2000      	movs	r0, #0
   b5f92:	4770      	bx	lr

000b5f94 <_ZNKSt9type_infoeqERKS_>:
   b5f94:	4281      	cmp	r1, r0
   b5f96:	b508      	push	{r3, lr}
   b5f98:	d00e      	beq.n	b5fb8 <_ZNKSt9type_infoeqERKS_+0x24>
   b5f9a:	6840      	ldr	r0, [r0, #4]
   b5f9c:	7803      	ldrb	r3, [r0, #0]
   b5f9e:	2b2a      	cmp	r3, #42	; 0x2a
   b5fa0:	d00c      	beq.n	b5fbc <_ZNKSt9type_infoeqERKS_+0x28>
   b5fa2:	6849      	ldr	r1, [r1, #4]
   b5fa4:	780b      	ldrb	r3, [r1, #0]
   b5fa6:	2b2a      	cmp	r3, #42	; 0x2a
   b5fa8:	bf08      	it	eq
   b5faa:	3101      	addeq	r1, #1
   b5fac:	f000 f852 	bl	b6054 <strcmp>
   b5fb0:	fab0 f080 	clz	r0, r0
   b5fb4:	0940      	lsrs	r0, r0, #5
   b5fb6:	bd08      	pop	{r3, pc}
   b5fb8:	2001      	movs	r0, #1
   b5fba:	e7fc      	b.n	b5fb6 <_ZNKSt9type_infoeqERKS_+0x22>
   b5fbc:	2000      	movs	r0, #0
   b5fbe:	e7fa      	b.n	b5fb6 <_ZNKSt9type_infoeqERKS_+0x22>

000b5fc0 <atexit>:
   b5fc0:	2300      	movs	r3, #0
   b5fc2:	4601      	mov	r1, r0
   b5fc4:	461a      	mov	r2, r3
   b5fc6:	4618      	mov	r0, r3
   b5fc8:	f000 b856 	b.w	b6078 <__register_exitproc>

000b5fcc <memcpy>:
   b5fcc:	440a      	add	r2, r1
   b5fce:	4291      	cmp	r1, r2
   b5fd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5fd4:	d100      	bne.n	b5fd8 <memcpy+0xc>
   b5fd6:	4770      	bx	lr
   b5fd8:	b510      	push	{r4, lr}
   b5fda:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5fde:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5fe2:	4291      	cmp	r1, r2
   b5fe4:	d1f9      	bne.n	b5fda <memcpy+0xe>
   b5fe6:	bd10      	pop	{r4, pc}

000b5fe8 <memset>:
   b5fe8:	4402      	add	r2, r0
   b5fea:	4603      	mov	r3, r0
   b5fec:	4293      	cmp	r3, r2
   b5fee:	d100      	bne.n	b5ff2 <memset+0xa>
   b5ff0:	4770      	bx	lr
   b5ff2:	f803 1b01 	strb.w	r1, [r3], #1
   b5ff6:	e7f9      	b.n	b5fec <memset+0x4>

000b5ff8 <srand>:
   b5ff8:	b538      	push	{r3, r4, r5, lr}
   b5ffa:	4b10      	ldr	r3, [pc, #64]	; (b603c <srand+0x44>)
   b5ffc:	681d      	ldr	r5, [r3, #0]
   b5ffe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6000:	4604      	mov	r4, r0
   b6002:	b9b3      	cbnz	r3, b6032 <srand+0x3a>
   b6004:	2018      	movs	r0, #24
   b6006:	f7fe ff39 	bl	b4e7c <malloc>
   b600a:	4602      	mov	r2, r0
   b600c:	63a8      	str	r0, [r5, #56]	; 0x38
   b600e:	b920      	cbnz	r0, b601a <srand+0x22>
   b6010:	4b0b      	ldr	r3, [pc, #44]	; (b6040 <srand+0x48>)
   b6012:	480c      	ldr	r0, [pc, #48]	; (b6044 <srand+0x4c>)
   b6014:	2142      	movs	r1, #66	; 0x42
   b6016:	f7fe ff51 	bl	b4ebc <__assert_func>
   b601a:	490b      	ldr	r1, [pc, #44]	; (b6048 <srand+0x50>)
   b601c:	4b0b      	ldr	r3, [pc, #44]	; (b604c <srand+0x54>)
   b601e:	e9c0 1300 	strd	r1, r3, [r0]
   b6022:	4b0b      	ldr	r3, [pc, #44]	; (b6050 <srand+0x58>)
   b6024:	6083      	str	r3, [r0, #8]
   b6026:	230b      	movs	r3, #11
   b6028:	8183      	strh	r3, [r0, #12]
   b602a:	2100      	movs	r1, #0
   b602c:	2001      	movs	r0, #1
   b602e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6032:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6034:	2200      	movs	r2, #0
   b6036:	611c      	str	r4, [r3, #16]
   b6038:	615a      	str	r2, [r3, #20]
   b603a:	bd38      	pop	{r3, r4, r5, pc}
   b603c:	2003e610 	.word	0x2003e610
   b6040:	000b64c5 	.word	0x000b64c5
   b6044:	000b64dc 	.word	0x000b64dc
   b6048:	abcd330e 	.word	0xabcd330e
   b604c:	e66d1234 	.word	0xe66d1234
   b6050:	0005deec 	.word	0x0005deec

000b6054 <strcmp>:
   b6054:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6058:	f811 3b01 	ldrb.w	r3, [r1], #1
   b605c:	2a01      	cmp	r2, #1
   b605e:	bf28      	it	cs
   b6060:	429a      	cmpcs	r2, r3
   b6062:	d0f7      	beq.n	b6054 <strcmp>
   b6064:	1ad0      	subs	r0, r2, r3
   b6066:	4770      	bx	lr

000b6068 <strlen>:
   b6068:	4603      	mov	r3, r0
   b606a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b606e:	2a00      	cmp	r2, #0
   b6070:	d1fb      	bne.n	b606a <strlen+0x2>
   b6072:	1a18      	subs	r0, r3, r0
   b6074:	3801      	subs	r0, #1
   b6076:	4770      	bx	lr

000b6078 <__register_exitproc>:
   b6078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b607c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6138 <__register_exitproc+0xc0>
   b6080:	4606      	mov	r6, r0
   b6082:	f8d8 0000 	ldr.w	r0, [r8]
   b6086:	461f      	mov	r7, r3
   b6088:	460d      	mov	r5, r1
   b608a:	4691      	mov	r9, r2
   b608c:	f000 f856 	bl	b613c <__retarget_lock_acquire_recursive>
   b6090:	4b25      	ldr	r3, [pc, #148]	; (b6128 <__register_exitproc+0xb0>)
   b6092:	681c      	ldr	r4, [r3, #0]
   b6094:	b934      	cbnz	r4, b60a4 <__register_exitproc+0x2c>
   b6096:	4c25      	ldr	r4, [pc, #148]	; (b612c <__register_exitproc+0xb4>)
   b6098:	601c      	str	r4, [r3, #0]
   b609a:	4b25      	ldr	r3, [pc, #148]	; (b6130 <__register_exitproc+0xb8>)
   b609c:	b113      	cbz	r3, b60a4 <__register_exitproc+0x2c>
   b609e:	681b      	ldr	r3, [r3, #0]
   b60a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b60a4:	6863      	ldr	r3, [r4, #4]
   b60a6:	2b1f      	cmp	r3, #31
   b60a8:	dd07      	ble.n	b60ba <__register_exitproc+0x42>
   b60aa:	f8d8 0000 	ldr.w	r0, [r8]
   b60ae:	f000 f847 	bl	b6140 <__retarget_lock_release_recursive>
   b60b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b60b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b60ba:	b34e      	cbz	r6, b6110 <__register_exitproc+0x98>
   b60bc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b60c0:	b988      	cbnz	r0, b60e6 <__register_exitproc+0x6e>
   b60c2:	4b1c      	ldr	r3, [pc, #112]	; (b6134 <__register_exitproc+0xbc>)
   b60c4:	b923      	cbnz	r3, b60d0 <__register_exitproc+0x58>
   b60c6:	f8d8 0000 	ldr.w	r0, [r8]
   b60ca:	f000 f838 	bl	b613e <__retarget_lock_release>
   b60ce:	e7f0      	b.n	b60b2 <__register_exitproc+0x3a>
   b60d0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b60d4:	f7fe fed2 	bl	b4e7c <malloc>
   b60d8:	2800      	cmp	r0, #0
   b60da:	d0f4      	beq.n	b60c6 <__register_exitproc+0x4e>
   b60dc:	2300      	movs	r3, #0
   b60de:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b60e2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b60e6:	6863      	ldr	r3, [r4, #4]
   b60e8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b60ec:	2201      	movs	r2, #1
   b60ee:	409a      	lsls	r2, r3
   b60f0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b60f4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b60f8:	4313      	orrs	r3, r2
   b60fa:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b60fe:	2e02      	cmp	r6, #2
   b6100:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6104:	bf02      	ittt	eq
   b6106:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b610a:	4313      	orreq	r3, r2
   b610c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6110:	6863      	ldr	r3, [r4, #4]
   b6112:	f8d8 0000 	ldr.w	r0, [r8]
   b6116:	1c5a      	adds	r2, r3, #1
   b6118:	3302      	adds	r3, #2
   b611a:	6062      	str	r2, [r4, #4]
   b611c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6120:	f000 f80e 	bl	b6140 <__retarget_lock_release_recursive>
   b6124:	2000      	movs	r0, #0
   b6126:	e7c6      	b.n	b60b6 <__register_exitproc+0x3e>
   b6128:	2003e7e8 	.word	0x2003e7e8
   b612c:	2003e75c 	.word	0x2003e75c
   b6130:	00000000 	.word	0x00000000
   b6134:	000b4e7d 	.word	0x000b4e7d
   b6138:	2003e674 	.word	0x2003e674

000b613c <__retarget_lock_acquire_recursive>:
   b613c:	4770      	bx	lr

000b613e <__retarget_lock_release>:
   b613e:	4770      	bx	lr

000b6140 <__retarget_lock_release_recursive>:
   b6140:	4770      	bx	lr

000b6142 <link_code_end>:
	...

000b6144 <dynalib_user>:
   b6144:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6154:	0000 0000 7274 6575 6300 6461 2f65 6165     ....true.cade/ea
   b6164:	7473 6573 736e 726f 6300 6461 2f65 6f6e     stsensor.cade/no
   b6174:	7472 7368 6e65 6f73 0072 6163 6564 6e2f     rthsensor.cade/n
   b6184:	726f 6874 6572 0064 6163 6564 6e2f 726f     orthred.cade/nor
   b6194:	6874 6579 6c6c 776f 6300 6461 2f65 6f6e     thyellow.cade/no
   b61a4:	7472 6768 6572 6e65 6300 6461 2f65 6165     rthgreen.cade/ea
   b61b4:	7473 6572 0064 6163 6564 652f 7361 7974     stred.cade/easty
   b61c4:	6c65 6f6c 0077 6163 6564 652f 7361 6774     ellow.cade/eastg
   b61d4:	6572 6e65 6600 6c61 6573 6c00 6261 742e     reen.false.lab.t
   b61e4:	6568 6377 2e6c 6f63 006d 0400 514d 5454     hewcl.com...MQTT
   b61f4:	0004 4d06 4951 6473 0370 0000               ...MQIsdp...

000b6200 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b6208 <_ZTVN5spark13EthernetClassE>:
	...
   b6210:	4f53 000b 4f49 000b 4f3f 000b 4f35 000b     SO..IO..?O..5O..
   b6220:	4f29 000b 4f1d 000b 50dd 000b 50e5 000b     )O...O...P...P..
   b6230:	4f11 000b 4f09 000b 4eff 000b 4ef5 000b     .O...O...N...N..
   b6240:	5115 000b                                   .Q..

000b6244 <_ZTV9IPAddress>:
	...
   b624c:	4f81 000b 4f71 000b 4f73 000b 7061 0070     .O..qO..sO..app.

000b625c <_ZTVN5spark12NetworkClassE>:
	...
   b6264:	509d 000b 50a7 000b 50b1 000b 50bb 000b     .P...P...P...P..
   b6274:	50c5 000b 50d1 000b 50dd 000b 50e5 000b     .P...P...P...P..
   b6284:	50ed 000b 50f9 000b 5101 000b 510b 000b     .P...P...Q...Q..
   b6294:	5115 000b 6977 6972 676e 7200 6365 2076     .Q..wiring.recv 
   b62a4:	7265 6f72 2072 203d 6425 0000               error = %d..

000b62b0 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b62b8:	5451 000b 5475 000b 59a7 000b 5483 000b     QT..uT...Y...T..
   b62c8:	5455 000b                                   UT..

000b62cc <_ZTV9TCPClient>:
	...
   b62d4:	5501 000b 5535 000b 53cd 000b 53e7 000b     .U..5U...S...S..
   b62e4:	583d 000b 5411 000b 56b3 000b 5445 000b     =X...T...V..ET..
   b62f4:	5745 000b 5585 000b 56e1 000b 58f1 000b     EW...U...V...X..
   b6304:	5681 000b 5447 000b 53f9 000b 5489 000b     .V..GT...S...T..
   b6314:	5565 000b 5925 252d 2d6d 6425 2554 3a48     eU..%Y-%m-%dT%H:
   b6324:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b6334 <_ZTV11USARTSerial>:
	...
   b633c:	59c1 000b 5a2d 000b 5a05 000b 5201 000b     .Y..-Z...Z...R..
   b634c:	59d5 000b 59f1 000b 59e3 000b 59ff 000b     .Y...Y...Y...Y..
   b635c:	59c3 000b 59c7 000b                         .Y...Y..

000b6364 <_ZTV9USBSerial>:
	...
   b636c:	5a6b 000b 5ad3 000b 5aa9 000b 5201 000b     kZ...Z...Z...R..
   b637c:	5a9b 000b 5a6d 000b 5a7d 000b 5acd 000b     .Z..mZ..}Z...Z..
   b638c:	5a8d 000b 5a65 000b                         .Z..eZ..

000b6394 <_ZTVN5spark9WiFiClassE>:
	...
   b639c:	5bc3 000b 5bb9 000b 5baf 000b 5b65 000b     .[...[...[..e[..
   b63ac:	5ba3 000b 5b97 000b 50dd 000b 50e5 000b     .[...[...P...P..
   b63bc:	5b8b 000b 5b83 000b 5b79 000b 5b6f 000b     .[...[..y[..o[..
   b63cc:	5115 000b                                   .Q..

000b63d0 <_ZSt7nothrow>:
	...

000b63d1 <_ZTSSt19_Sp_make_shared_tag>:
   b63d1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b63e1:	6572 5f64 6174 0067 0000                     red_tag....

000b63ec <_ZTISt19_Sp_make_shared_tag>:
   b63ec:	642c 000b 63d1 000b                         ,d...c..

000b63f4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b63f4:	648c 000b 6400 000b 64b0 000b               .d...d...d..

000b6400 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b6400:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b6410:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b6420:	0045 0000                                   E...

000b6424 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b6424:	0000 0000 63f4 000b 5de9 000b 5dfd 000b     .....c...]...]..
   b6434:	5f91 000b 5f91 000b 5e67 000b 5da9 000b     ._..._..g^...]..
   b6444:	5e4f 000b 5e11 000b 5ddb 000b               O^...^...]..

000b6450 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b6450:	648c 000b 645c 000b 63f4 000b               .d..\d...c..

000b645c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b645c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b646c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b647c:	666e 456f 0000 0000                         nfoE....

000b6484 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b6484:	0000 0000 6450 000b 5e91 000b 5ea5 000b     ....Pd...^...^..
   b6494:	5f91 000b 5f91 000b 5e67 000b 5da9 000b     ._..._..g^...]..
   b64a4:	5f65 000b 5ef1 000b 5eb9 000b               e_...^...^..

000b64b0 <_ZTISt9type_info>:
   b64b0:	642c 000b 64b8 000b                         ,d...d..

000b64b8 <_ZTSSt9type_info>:
   b64b8:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b64c8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b64d8:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b64e8:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b64f8:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b6508:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b6518:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b6528:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b6535 <link_const_variable_data_end>:
   b6535:	00          	.byte	0x00
	...

000b6538 <link_constructors_location>:
   b6538:	000b4291 	.word	0x000b4291
   b653c:	000b4ee5 	.word	0x000b4ee5
   b6540:	000b4f5d 	.word	0x000b4f5d
   b6544:	000b508d 	.word	0x000b508d
   b6548:	000b51ed 	.word	0x000b51ed
   b654c:	000b5295 	.word	0x000b5295
   b6550:	000b53a9 	.word	0x000b53a9
   b6554:	000b59ad 	.word	0x000b59ad
   b6558:	000b5bcd 	.word	0x000b5bcd

000b655c <link_constructors_end>:
   b655c:	00000000 	.word	0x00000000
